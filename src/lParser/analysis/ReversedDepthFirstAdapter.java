/* This file was generated by SableCC (http://www.sablecc.org/). */

package lParser.analysis;

import java.util.*;
import lParser.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProgramme().apply(this);
        outStart(node);
    }

    public void inAProgrammeProgramme(AProgrammeProgramme node)
    {
        defaultIn(node);
    }

    public void outAProgrammeProgramme(AProgrammeProgramme node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgrammeProgramme(AProgrammeProgramme node)
    {
        inAProgrammeProgramme(node);
        if(node.getListDeclarationFunction() != null)
        {
            node.getListDeclarationFunction().apply(this);
        }
        if(node.getListDeclarationVariable() != null)
        {
            node.getListDeclarationVariable().apply(this);
        }
        outAProgrammeProgramme(node);
    }

    public void inAOuExpression(AOuExpression node)
    {
        defaultIn(node);
    }

    public void outAOuExpression(AOuExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOuExpression(AOuExpression node)
    {
        inAOuExpression(node);
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        if(node.getOu() != null)
        {
            node.getOu().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAOuExpression(node);
    }

    public void inAP2Expression(AP2Expression node)
    {
        defaultIn(node);
    }

    public void outAP2Expression(AP2Expression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAP2Expression(AP2Expression node)
    {
        inAP2Expression(node);
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        outAP2Expression(node);
    }

    public void inAEtExpression2(AEtExpression2 node)
    {
        defaultIn(node);
    }

    public void outAEtExpression2(AEtExpression2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEtExpression2(AEtExpression2 node)
    {
        inAEtExpression2(node);
        if(node.getExpression3() != null)
        {
            node.getExpression3().apply(this);
        }
        if(node.getEt() != null)
        {
            node.getEt().apply(this);
        }
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        outAEtExpression2(node);
    }

    public void inAP3Expression2(AP3Expression2 node)
    {
        defaultIn(node);
    }

    public void outAP3Expression2(AP3Expression2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAP3Expression2(AP3Expression2 node)
    {
        inAP3Expression2(node);
        if(node.getExpression3() != null)
        {
            node.getExpression3().apply(this);
        }
        outAP3Expression2(node);
    }

    public void inAEquExpression3(AEquExpression3 node)
    {
        defaultIn(node);
    }

    public void outAEquExpression3(AEquExpression3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEquExpression3(AEquExpression3 node)
    {
        inAEquExpression3(node);
        if(node.getExpression4() != null)
        {
            node.getExpression4().apply(this);
        }
        if(node.getEqu() != null)
        {
            node.getEqu().apply(this);
        }
        if(node.getExpression3() != null)
        {
            node.getExpression3().apply(this);
        }
        outAEquExpression3(node);
    }

    public void inAInfExpression3(AInfExpression3 node)
    {
        defaultIn(node);
    }

    public void outAInfExpression3(AInfExpression3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInfExpression3(AInfExpression3 node)
    {
        inAInfExpression3(node);
        if(node.getExpression4() != null)
        {
            node.getExpression4().apply(this);
        }
        if(node.getInf() != null)
        {
            node.getInf().apply(this);
        }
        if(node.getExpression3() != null)
        {
            node.getExpression3().apply(this);
        }
        outAInfExpression3(node);
    }

    public void inAP4Expression3(AP4Expression3 node)
    {
        defaultIn(node);
    }

    public void outAP4Expression3(AP4Expression3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAP4Expression3(AP4Expression3 node)
    {
        inAP4Expression3(node);
        if(node.getExpression4() != null)
        {
            node.getExpression4().apply(this);
        }
        outAP4Expression3(node);
    }

    public void inAPlusExpression4(APlusExpression4 node)
    {
        defaultIn(node);
    }

    public void outAPlusExpression4(APlusExpression4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusExpression4(APlusExpression4 node)
    {
        inAPlusExpression4(node);
        if(node.getExpression5() != null)
        {
            node.getExpression5().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getExpression4() != null)
        {
            node.getExpression4().apply(this);
        }
        outAPlusExpression4(node);
    }

    public void inAMoinsExpression4(AMoinsExpression4 node)
    {
        defaultIn(node);
    }

    public void outAMoinsExpression4(AMoinsExpression4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMoinsExpression4(AMoinsExpression4 node)
    {
        inAMoinsExpression4(node);
        if(node.getExpression5() != null)
        {
            node.getExpression5().apply(this);
        }
        if(node.getMoins() != null)
        {
            node.getMoins().apply(this);
        }
        if(node.getExpression4() != null)
        {
            node.getExpression4().apply(this);
        }
        outAMoinsExpression4(node);
    }

    public void inAP5Expression4(AP5Expression4 node)
    {
        defaultIn(node);
    }

    public void outAP5Expression4(AP5Expression4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAP5Expression4(AP5Expression4 node)
    {
        inAP5Expression4(node);
        if(node.getExpression5() != null)
        {
            node.getExpression5().apply(this);
        }
        outAP5Expression4(node);
    }

    public void inAMultExpression5(AMultExpression5 node)
    {
        defaultIn(node);
    }

    public void outAMultExpression5(AMultExpression5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultExpression5(AMultExpression5 node)
    {
        inAMultExpression5(node);
        if(node.getExpression6() != null)
        {
            node.getExpression6().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getExpression5() != null)
        {
            node.getExpression5().apply(this);
        }
        outAMultExpression5(node);
    }

    public void inADivExpression5(ADivExpression5 node)
    {
        defaultIn(node);
    }

    public void outADivExpression5(ADivExpression5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExpression5(ADivExpression5 node)
    {
        inADivExpression5(node);
        if(node.getExpression6() != null)
        {
            node.getExpression6().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getExpression5() != null)
        {
            node.getExpression5().apply(this);
        }
        outADivExpression5(node);
    }

    public void inAP6Expression5(AP6Expression5 node)
    {
        defaultIn(node);
    }

    public void outAP6Expression5(AP6Expression5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAP6Expression5(AP6Expression5 node)
    {
        inAP6Expression5(node);
        if(node.getExpression6() != null)
        {
            node.getExpression6().apply(this);
        }
        outAP6Expression5(node);
    }

    public void inANonExpression6(ANonExpression6 node)
    {
        defaultIn(node);
    }

    public void outANonExpression6(ANonExpression6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANonExpression6(ANonExpression6 node)
    {
        inANonExpression6(node);
        if(node.getExpression6() != null)
        {
            node.getExpression6().apply(this);
        }
        if(node.getNon() != null)
        {
            node.getNon().apply(this);
        }
        outANonExpression6(node);
    }

    public void inAP7Expression6(AP7Expression6 node)
    {
        defaultIn(node);
    }

    public void outAP7Expression6(AP7Expression6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAP7Expression6(AP7Expression6 node)
    {
        inAP7Expression6(node);
        if(node.getExpression7() != null)
        {
            node.getExpression7().apply(this);
        }
        outAP7Expression6(node);
    }

    public void inAParenteseExpression7(AParenteseExpression7 node)
    {
        defaultIn(node);
    }

    public void outAParenteseExpression7(AParenteseExpression7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParenteseExpression7(AParenteseExpression7 node)
    {
        inAParenteseExpression7(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAParenteseExpression7(node);
    }

    public void inANombreExpression7(ANombreExpression7 node)
    {
        defaultIn(node);
    }

    public void outANombreExpression7(ANombreExpression7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANombreExpression7(ANombreExpression7 node)
    {
        inANombreExpression7(node);
        if(node.getNombre() != null)
        {
            node.getNombre().apply(this);
        }
        outANombreExpression7(node);
    }

    public void inAVraiExpression7(AVraiExpression7 node)
    {
        defaultIn(node);
    }

    public void outAVraiExpression7(AVraiExpression7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVraiExpression7(AVraiExpression7 node)
    {
        inAVraiExpression7(node);
        if(node.getVrai() != null)
        {
            node.getVrai().apply(this);
        }
        outAVraiExpression7(node);
    }

    public void inAFauxExpression7(AFauxExpression7 node)
    {
        defaultIn(node);
    }

    public void outAFauxExpression7(AFauxExpression7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFauxExpression7(AFauxExpression7 node)
    {
        inAFauxExpression7(node);
        if(node.getFaux() != null)
        {
            node.getFaux().apply(this);
        }
        outAFauxExpression7(node);
    }

    public void inAVarExpression7(AVarExpression7 node)
    {
        defaultIn(node);
    }

    public void outAVarExpression7(AVarExpression7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarExpression7(AVarExpression7 node)
    {
        inAVarExpression7(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarExpression7(node);
    }

    public void inAAfExpression7(AAfExpression7 node)
    {
        defaultIn(node);
    }

    public void outAAfExpression7(AAfExpression7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAfExpression7(AAfExpression7 node)
    {
        inAAfExpression7(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getListeExpressions() != null)
        {
            node.getListeExpressions().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIdentifiant() != null)
        {
            node.getIdentifiant().apply(this);
        }
        outAAfExpression7(node);
    }

    public void inALireExpression7(ALireExpression7 node)
    {
        defaultIn(node);
    }

    public void outALireExpression7(ALireExpression7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALireExpression7(ALireExpression7 node)
    {
        inALireExpression7(node);
        if(node.getLire() != null)
        {
            node.getLire().apply(this);
        }
        outALireExpression7(node);
    }

    public void inAListeExListeExpressions(AListeExListeExpressions node)
    {
        defaultIn(node);
    }

    public void outAListeExListeExpressions(AListeExListeExpressions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListeExListeExpressions(AListeExListeExpressions node)
    {
        inAListeExListeExpressions(node);
        if(node.getListeExpressionsNext() != null)
        {
            node.getListeExpressionsNext().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAListeExListeExpressions(node);
    }

    public void inAVideListeExpressions(AVideListeExpressions node)
    {
        defaultIn(node);
    }

    public void outAVideListeExpressions(AVideListeExpressions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideListeExpressions(AVideListeExpressions node)
    {
        inAVideListeExpressions(node);
        outAVideListeExpressions(node);
    }

    public void inAVirguleListeExpressionsNext(AVirguleListeExpressionsNext node)
    {
        defaultIn(node);
    }

    public void outAVirguleListeExpressionsNext(AVirguleListeExpressionsNext node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVirguleListeExpressionsNext(AVirguleListeExpressionsNext node)
    {
        inAVirguleListeExpressionsNext(node);
        if(node.getListeExpressionsNext() != null)
        {
            node.getListeExpressionsNext().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getVirgule() != null)
        {
            node.getVirgule().apply(this);
        }
        outAVirguleListeExpressionsNext(node);
    }

    public void inAVideListeExpressionsNext(AVideListeExpressionsNext node)
    {
        defaultIn(node);
    }

    public void outAVideListeExpressionsNext(AVideListeExpressionsNext node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideListeExpressionsNext(AVideListeExpressionsNext node)
    {
        inAVideListeExpressionsNext(node);
        outAVideListeExpressionsNext(node);
    }

    public void inAAffectInstruction(AAffectInstruction node)
    {
        defaultIn(node);
    }

    public void outAAffectInstruction(AAffectInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAffectInstruction(AAffectInstruction node)
    {
        inAAffectInstruction(node);
        if(node.getPVirgule() != null)
        {
            node.getPVirgule().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getEqu() != null)
        {
            node.getEqu().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAAffectInstruction(node);
    }

    public void inATantqueInstruction(ATantqueInstruction node)
    {
        defaultIn(node);
    }

    public void outATantqueInstruction(ATantqueInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATantqueInstruction(ATantqueInstruction node)
    {
        inATantqueInstruction(node);
        if(node.getBlocInstructions() != null)
        {
            node.getBlocInstructions().apply(this);
        }
        if(node.getFaire() != null)
        {
            node.getFaire().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getTantque() != null)
        {
            node.getTantque().apply(this);
        }
        outATantqueInstruction(node);
    }

    public void inASiInstruction(ASiInstruction node)
    {
        defaultIn(node);
    }

    public void outASiInstruction(ASiInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASiInstruction(ASiInstruction node)
    {
        inASiInstruction(node);
        if(node.getBlocInstructions() != null)
        {
            node.getBlocInstructions().apply(this);
        }
        if(node.getAlors() != null)
        {
            node.getAlors().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getSi() != null)
        {
            node.getSi().apply(this);
        }
        outASiInstruction(node);
    }

    public void inASinonInstruction(ASinonInstruction node)
    {
        defaultIn(node);
    }

    public void outASinonInstruction(ASinonInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASinonInstruction(ASinonInstruction node)
    {
        inASinonInstruction(node);
        if(node.getBlocSinon() != null)
        {
            node.getBlocSinon().apply(this);
        }
        if(node.getSinon() != null)
        {
            node.getSinon().apply(this);
        }
        if(node.getBlocSi() != null)
        {
            node.getBlocSi().apply(this);
        }
        if(node.getAlors() != null)
        {
            node.getAlors().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getSi() != null)
        {
            node.getSi().apply(this);
        }
        outASinonInstruction(node);
    }

    public void inAAppelFonInstruction(AAppelFonInstruction node)
    {
        defaultIn(node);
    }

    public void outAAppelFonInstruction(AAppelFonInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAppelFonInstruction(AAppelFonInstruction node)
    {
        inAAppelFonInstruction(node);
        if(node.getPVirgule() != null)
        {
            node.getPVirgule().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getListeExpressions() != null)
        {
            node.getListeExpressions().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIdentifiant() != null)
        {
            node.getIdentifiant().apply(this);
        }
        outAAppelFonInstruction(node);
    }

    public void inAEcrireInstruction(AEcrireInstruction node)
    {
        defaultIn(node);
    }

    public void outAEcrireInstruction(AEcrireInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEcrireInstruction(AEcrireInstruction node)
    {
        inAEcrireInstruction(node);
        if(node.getPVirgule() != null)
        {
            node.getPVirgule().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getEcrire() != null)
        {
            node.getEcrire().apply(this);
        }
        outAEcrireInstruction(node);
    }

    public void inAResultFoncInstruction(AResultFoncInstruction node)
    {
        defaultIn(node);
    }

    public void outAResultFoncInstruction(AResultFoncInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAResultFoncInstruction(AResultFoncInstruction node)
    {
        inAResultFoncInstruction(node);
        if(node.getPVirgule() != null)
        {
            node.getPVirgule().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRetour() != null)
        {
            node.getRetour().apply(this);
        }
        outAResultFoncInstruction(node);
    }

    public void inABlocIntBlocInstructions(ABlocIntBlocInstructions node)
    {
        defaultIn(node);
    }

    public void outABlocIntBlocInstructions(ABlocIntBlocInstructions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocIntBlocInstructions(ABlocIntBlocInstructions node)
    {
        inABlocIntBlocInstructions(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getListeInstructions() != null)
        {
            node.getListeInstructions().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        outABlocIntBlocInstructions(node);
    }

    public void inAListeIntListeInstructions(AListeIntListeInstructions node)
    {
        defaultIn(node);
    }

    public void outAListeIntListeInstructions(AListeIntListeInstructions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListeIntListeInstructions(AListeIntListeInstructions node)
    {
        inAListeIntListeInstructions(node);
        if(node.getListeInstructions() != null)
        {
            node.getListeInstructions().apply(this);
        }
        if(node.getInstruction() != null)
        {
            node.getInstruction().apply(this);
        }
        outAListeIntListeInstructions(node);
    }

    public void inAVideListeInstructions(AVideListeInstructions node)
    {
        defaultIn(node);
    }

    public void outAVideListeInstructions(AVideListeInstructions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideListeInstructions(AVideListeInstructions node)
    {
        inAVideListeInstructions(node);
        outAVideListeInstructions(node);
    }

    public void inASimpleVar(ASimpleVar node)
    {
        defaultIn(node);
    }

    public void outASimpleVar(ASimpleVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleVar(ASimpleVar node)
    {
        inASimpleVar(node);
        if(node.getIdentifiant() != null)
        {
            node.getIdentifiant().apply(this);
        }
        outASimpleVar(node);
    }

    public void inATableauVar(ATableauVar node)
    {
        defaultIn(node);
    }

    public void outATableauVar(ATableauVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATableauVar(ATableauVar node)
    {
        inATableauVar(node);
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getIdentifiant() != null)
        {
            node.getIdentifiant().apply(this);
        }
        outATableauVar(node);
    }

    public void inADecSimpleDeclarVar(ADecSimpleDeclarVar node)
    {
        defaultIn(node);
    }

    public void outADecSimpleDeclarVar(ADecSimpleDeclarVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecSimpleDeclarVar(ADecSimpleDeclarVar node)
    {
        inADecSimpleDeclarVar(node);
        if(node.getIdentifiant() != null)
        {
            node.getIdentifiant().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outADecSimpleDeclarVar(node);
    }

    public void inADecTableauDeclarVar(ADecTableauDeclarVar node)
    {
        defaultIn(node);
    }

    public void outADecTableauDeclarVar(ADecTableauDeclarVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecTableauDeclarVar(ADecTableauDeclarVar node)
    {
        inADecTableauDeclarVar(node);
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getNombre() != null)
        {
            node.getNombre().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getIdentifiant() != null)
        {
            node.getIdentifiant().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outADecTableauDeclarVar(node);
    }

    public void inABoolType(ABoolType node)
    {
        defaultIn(node);
    }

    public void outABoolType(ABoolType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolType(ABoolType node)
    {
        inABoolType(node);
        if(node.getBool() != null)
        {
            node.getBool().apply(this);
        }
        outABoolType(node);
    }

    public void inAEntierType(AEntierType node)
    {
        defaultIn(node);
    }

    public void outAEntierType(AEntierType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEntierType(AEntierType node)
    {
        inAEntierType(node);
        if(node.getEntier() != null)
        {
            node.getEntier().apply(this);
        }
        outAEntierType(node);
    }

    public void inADeclarationFunctionDeclarationFunction(ADeclarationFunctionDeclarationFunction node)
    {
        defaultIn(node);
    }

    public void outADeclarationFunctionDeclarationFunction(ADeclarationFunctionDeclarationFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclarationFunctionDeclarationFunction(ADeclarationFunctionDeclarationFunction node)
    {
        inADeclarationFunctionDeclarationFunction(node);
        if(node.getBlocInstructions() != null)
        {
            node.getBlocInstructions().apply(this);
        }
        if(node.getVariableInterne() != null)
        {
            node.getVariableInterne().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getParametre() != null)
        {
            node.getParametre().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIdentifiant() != null)
        {
            node.getIdentifiant().apply(this);
        }
        if(node.getTypeOption() != null)
        {
            node.getTypeOption().apply(this);
        }
        outADeclarationFunctionDeclarationFunction(node);
    }

    public void inATypeTypeOption(ATypeTypeOption node)
    {
        defaultIn(node);
    }

    public void outATypeTypeOption(ATypeTypeOption node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeTypeOption(ATypeTypeOption node)
    {
        inATypeTypeOption(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outATypeTypeOption(node);
    }

    public void inAVideTypeOption(AVideTypeOption node)
    {
        defaultIn(node);
    }

    public void outAVideTypeOption(AVideTypeOption node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideTypeOption(AVideTypeOption node)
    {
        inAVideTypeOption(node);
        outAVideTypeOption(node);
    }

    public void inAVariableListDeclarationVariable(AVariableListDeclarationVariable node)
    {
        defaultIn(node);
    }

    public void outAVariableListDeclarationVariable(AVariableListDeclarationVariable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableListDeclarationVariable(AVariableListDeclarationVariable node)
    {
        inAVariableListDeclarationVariable(node);
        if(node.getListDeclarationVariableNext() != null)
        {
            node.getListDeclarationVariableNext().apply(this);
        }
        if(node.getDeclarVar() != null)
        {
            node.getDeclarVar().apply(this);
        }
        outAVariableListDeclarationVariable(node);
    }

    public void inAVideListDeclarationVariable(AVideListDeclarationVariable node)
    {
        defaultIn(node);
    }

    public void outAVideListDeclarationVariable(AVideListDeclarationVariable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideListDeclarationVariable(AVideListDeclarationVariable node)
    {
        inAVideListDeclarationVariable(node);
        outAVideListDeclarationVariable(node);
    }

    public void inAVirguleVarListDeclarationVariableNext(AVirguleVarListDeclarationVariableNext node)
    {
        defaultIn(node);
    }

    public void outAVirguleVarListDeclarationVariableNext(AVirguleVarListDeclarationVariableNext node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVirguleVarListDeclarationVariableNext(AVirguleVarListDeclarationVariableNext node)
    {
        inAVirguleVarListDeclarationVariableNext(node);
        if(node.getListDeclarationVariableNext() != null)
        {
            node.getListDeclarationVariableNext().apply(this);
        }
        if(node.getDeclarVar() != null)
        {
            node.getDeclarVar().apply(this);
        }
        if(node.getVirgule() != null)
        {
            node.getVirgule().apply(this);
        }
        outAVirguleVarListDeclarationVariableNext(node);
    }

    public void inAVideListDeclarationVariableNext(AVideListDeclarationVariableNext node)
    {
        defaultIn(node);
    }

    public void outAVideListDeclarationVariableNext(AVideListDeclarationVariableNext node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideListDeclarationVariableNext(AVideListDeclarationVariableNext node)
    {
        inAVideListDeclarationVariableNext(node);
        outAVideListDeclarationVariableNext(node);
    }

    public void inAListDeclarationFunctionListDeclarationFunction(AListDeclarationFunctionListDeclarationFunction node)
    {
        defaultIn(node);
    }

    public void outAListDeclarationFunctionListDeclarationFunction(AListDeclarationFunctionListDeclarationFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListDeclarationFunctionListDeclarationFunction(AListDeclarationFunctionListDeclarationFunction node)
    {
        inAListDeclarationFunctionListDeclarationFunction(node);
        if(node.getListDeclarationFunction() != null)
        {
            node.getListDeclarationFunction().apply(this);
        }
        if(node.getDeclarationFunction() != null)
        {
            node.getDeclarationFunction().apply(this);
        }
        outAListDeclarationFunctionListDeclarationFunction(node);
    }

    public void inAVideListDeclarationFunction(AVideListDeclarationFunction node)
    {
        defaultIn(node);
    }

    public void outAVideListDeclarationFunction(AVideListDeclarationFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideListDeclarationFunction(AVideListDeclarationFunction node)
    {
        inAVideListDeclarationFunction(node);
        outAVideListDeclarationFunction(node);
    }
}
