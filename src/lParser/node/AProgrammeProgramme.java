/* This file was generated by SableCC (http://www.sablecc.org/). */

package lParser.node;

import lParser.analysis.*;

@SuppressWarnings("nls")
public final class AProgrammeProgramme extends PProgramme
{
    private PListDeclarationVariable _listDeclarationVariable_;
    private PListDeclarationFunction _listDeclarationFunction_;

    public AProgrammeProgramme()
    {
        // Constructor
    }

    public AProgrammeProgramme(
        @SuppressWarnings("hiding") PListDeclarationVariable _listDeclarationVariable_,
        @SuppressWarnings("hiding") PListDeclarationFunction _listDeclarationFunction_)
    {
        // Constructor
        setListDeclarationVariable(_listDeclarationVariable_);

        setListDeclarationFunction(_listDeclarationFunction_);

    }

    @Override
    public Object clone()
    {
        return new AProgrammeProgramme(
            cloneNode(this._listDeclarationVariable_),
            cloneNode(this._listDeclarationFunction_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAProgrammeProgramme(this);
    }

    public PListDeclarationVariable getListDeclarationVariable()
    {
        return this._listDeclarationVariable_;
    }

    public void setListDeclarationVariable(PListDeclarationVariable node)
    {
        if(this._listDeclarationVariable_ != null)
        {
            this._listDeclarationVariable_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._listDeclarationVariable_ = node;
    }

    public PListDeclarationFunction getListDeclarationFunction()
    {
        return this._listDeclarationFunction_;
    }

    public void setListDeclarationFunction(PListDeclarationFunction node)
    {
        if(this._listDeclarationFunction_ != null)
        {
            this._listDeclarationFunction_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._listDeclarationFunction_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._listDeclarationVariable_)
            + toString(this._listDeclarationFunction_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._listDeclarationVariable_ == child)
        {
            this._listDeclarationVariable_ = null;
            return;
        }

        if(this._listDeclarationFunction_ == child)
        {
            this._listDeclarationFunction_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._listDeclarationVariable_ == oldChild)
        {
            setListDeclarationVariable((PListDeclarationVariable) newChild);
            return;
        }

        if(this._listDeclarationFunction_ == oldChild)
        {
            setListDeclarationFunction((PListDeclarationFunction) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
