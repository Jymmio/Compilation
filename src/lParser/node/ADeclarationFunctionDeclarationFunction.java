/* This file was generated by SableCC (http://www.sablecc.org/). */

package lParser.node;

import lParser.analysis.*;

@SuppressWarnings("nls")
public final class ADeclarationFunctionDeclarationFunction extends PDeclarationFunction
{
    private PTypeOption _typeOption_;
    private TIdentifiant _identifiant_;
    private TLPar _lPar_;
    private PListDeclarationVariable _parametre_;
    private TRPar _rPar_;
    private PListDeclarationVariable _variableInterne_;
    private PBlocInstructions _blocInstructions_;

    public ADeclarationFunctionDeclarationFunction()
    {
        // Constructor
    }

    public ADeclarationFunctionDeclarationFunction(
        @SuppressWarnings("hiding") PTypeOption _typeOption_,
        @SuppressWarnings("hiding") TIdentifiant _identifiant_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") PListDeclarationVariable _parametre_,
        @SuppressWarnings("hiding") TRPar _rPar_,
        @SuppressWarnings("hiding") PListDeclarationVariable _variableInterne_,
        @SuppressWarnings("hiding") PBlocInstructions _blocInstructions_)
    {
        // Constructor
        setTypeOption(_typeOption_);

        setIdentifiant(_identifiant_);

        setLPar(_lPar_);

        setParametre(_parametre_);

        setRPar(_rPar_);

        setVariableInterne(_variableInterne_);

        setBlocInstructions(_blocInstructions_);

    }

    @Override
    public Object clone()
    {
        return new ADeclarationFunctionDeclarationFunction(
            cloneNode(this._typeOption_),
            cloneNode(this._identifiant_),
            cloneNode(this._lPar_),
            cloneNode(this._parametre_),
            cloneNode(this._rPar_),
            cloneNode(this._variableInterne_),
            cloneNode(this._blocInstructions_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADeclarationFunctionDeclarationFunction(this);
    }

    public PTypeOption getTypeOption()
    {
        return this._typeOption_;
    }

    public void setTypeOption(PTypeOption node)
    {
        if(this._typeOption_ != null)
        {
            this._typeOption_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._typeOption_ = node;
    }

    public TIdentifiant getIdentifiant()
    {
        return this._identifiant_;
    }

    public void setIdentifiant(TIdentifiant node)
    {
        if(this._identifiant_ != null)
        {
            this._identifiant_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifiant_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public PListDeclarationVariable getParametre()
    {
        return this._parametre_;
    }

    public void setParametre(PListDeclarationVariable node)
    {
        if(this._parametre_ != null)
        {
            this._parametre_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parametre_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    public PListDeclarationVariable getVariableInterne()
    {
        return this._variableInterne_;
    }

    public void setVariableInterne(PListDeclarationVariable node)
    {
        if(this._variableInterne_ != null)
        {
            this._variableInterne_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._variableInterne_ = node;
    }

    public PBlocInstructions getBlocInstructions()
    {
        return this._blocInstructions_;
    }

    public void setBlocInstructions(PBlocInstructions node)
    {
        if(this._blocInstructions_ != null)
        {
            this._blocInstructions_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._blocInstructions_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._typeOption_)
            + toString(this._identifiant_)
            + toString(this._lPar_)
            + toString(this._parametre_)
            + toString(this._rPar_)
            + toString(this._variableInterne_)
            + toString(this._blocInstructions_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._typeOption_ == child)
        {
            this._typeOption_ = null;
            return;
        }

        if(this._identifiant_ == child)
        {
            this._identifiant_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._parametre_ == child)
        {
            this._parametre_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        if(this._variableInterne_ == child)
        {
            this._variableInterne_ = null;
            return;
        }

        if(this._blocInstructions_ == child)
        {
            this._blocInstructions_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._typeOption_ == oldChild)
        {
            setTypeOption((PTypeOption) newChild);
            return;
        }

        if(this._identifiant_ == oldChild)
        {
            setIdentifiant((TIdentifiant) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._parametre_ == oldChild)
        {
            setParametre((PListDeclarationVariable) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        if(this._variableInterne_ == oldChild)
        {
            setVariableInterne((PListDeclarationVariable) newChild);
            return;
        }

        if(this._blocInstructions_ == oldChild)
        {
            setBlocInstructions((PBlocInstructions) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
