/* This file was generated by SableCC (http://www.sablecc.org/). */

package lParser.node;

import lParser.analysis.*;

@SuppressWarnings("nls")
public final class AVirguleVarListDeclarationVariableNext extends PListDeclarationVariableNext
{
    private TVirgule _virgule_;
    private PDeclarVar _declarVar_;
    private PListDeclarationVariableNext _listDeclarationVariableNext_;

    public AVirguleVarListDeclarationVariableNext()
    {
        // Constructor
    }

    public AVirguleVarListDeclarationVariableNext(
        @SuppressWarnings("hiding") TVirgule _virgule_,
        @SuppressWarnings("hiding") PDeclarVar _declarVar_,
        @SuppressWarnings("hiding") PListDeclarationVariableNext _listDeclarationVariableNext_)
    {
        // Constructor
        setVirgule(_virgule_);

        setDeclarVar(_declarVar_);

        setListDeclarationVariableNext(_listDeclarationVariableNext_);

    }

    @Override
    public Object clone()
    {
        return new AVirguleVarListDeclarationVariableNext(
            cloneNode(this._virgule_),
            cloneNode(this._declarVar_),
            cloneNode(this._listDeclarationVariableNext_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAVirguleVarListDeclarationVariableNext(this);
    }

    public TVirgule getVirgule()
    {
        return this._virgule_;
    }

    public void setVirgule(TVirgule node)
    {
        if(this._virgule_ != null)
        {
            this._virgule_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._virgule_ = node;
    }

    public PDeclarVar getDeclarVar()
    {
        return this._declarVar_;
    }

    public void setDeclarVar(PDeclarVar node)
    {
        if(this._declarVar_ != null)
        {
            this._declarVar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._declarVar_ = node;
    }

    public PListDeclarationVariableNext getListDeclarationVariableNext()
    {
        return this._listDeclarationVariableNext_;
    }

    public void setListDeclarationVariableNext(PListDeclarationVariableNext node)
    {
        if(this._listDeclarationVariableNext_ != null)
        {
            this._listDeclarationVariableNext_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._listDeclarationVariableNext_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._virgule_)
            + toString(this._declarVar_)
            + toString(this._listDeclarationVariableNext_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._virgule_ == child)
        {
            this._virgule_ = null;
            return;
        }

        if(this._declarVar_ == child)
        {
            this._declarVar_ = null;
            return;
        }

        if(this._listDeclarationVariableNext_ == child)
        {
            this._listDeclarationVariableNext_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._virgule_ == oldChild)
        {
            setVirgule((TVirgule) newChild);
            return;
        }

        if(this._declarVar_ == oldChild)
        {
            setDeclarVar((PDeclarVar) newChild);
            return;
        }

        if(this._listDeclarationVariableNext_ == oldChild)
        {
            setListDeclarationVariableNext((PListDeclarationVariableNext) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
