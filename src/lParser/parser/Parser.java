/* This file was generated by SableCC (http://www.sablecc.org/). */

package lParser.parser;

import lParser.lexer.*;
import lParser.node.*;
import lParser.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgramme node1 = (PProgramme) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AProgramme$Variable1Programme */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AProgramme$Vide1Programme */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce AOuExpression */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list);
            }
            break;
            case 3: /* reduce AP2Expression */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list);
            }
            break;
            case 4: /* reduce AEtExpression2 */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list);
            }
            break;
            case 5: /* reduce AP3Expression2 */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list);
            }
            break;
            case 6: /* reduce AEquExpression3 */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list);
            }
            break;
            case 7: /* reduce AInfExpression3 */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list);
            }
            break;
            case 8: /* reduce AP4Expression3 */
            {
                ArrayList<Object> list = new8();
                push(goTo(3), list);
            }
            break;
            case 9: /* reduce APlusExpression4 */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list);
            }
            break;
            case 10: /* reduce AMoinsExpression4 */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list);
            }
            break;
            case 11: /* reduce AP5Expression4 */
            {
                ArrayList<Object> list = new11();
                push(goTo(4), list);
            }
            break;
            case 12: /* reduce AMultExpression5 */
            {
                ArrayList<Object> list = new12();
                push(goTo(5), list);
            }
            break;
            case 13: /* reduce ADivExpression5 */
            {
                ArrayList<Object> list = new13();
                push(goTo(5), list);
            }
            break;
            case 14: /* reduce AP6Expression5 */
            {
                ArrayList<Object> list = new14();
                push(goTo(5), list);
            }
            break;
            case 15: /* reduce ANonExpression6 */
            {
                ArrayList<Object> list = new15();
                push(goTo(6), list);
            }
            break;
            case 16: /* reduce AP7Expression6 */
            {
                ArrayList<Object> list = new16();
                push(goTo(6), list);
            }
            break;
            case 17: /* reduce AParenteseExpression7 */
            {
                ArrayList<Object> list = new17();
                push(goTo(7), list);
            }
            break;
            case 18: /* reduce ANombreExpression7 */
            {
                ArrayList<Object> list = new18();
                push(goTo(7), list);
            }
            break;
            case 19: /* reduce AVraiExpression7 */
            {
                ArrayList<Object> list = new19();
                push(goTo(7), list);
            }
            break;
            case 20: /* reduce AFauxExpression7 */
            {
                ArrayList<Object> list = new20();
                push(goTo(7), list);
            }
            break;
            case 21: /* reduce AVarExpression7 */
            {
                ArrayList<Object> list = new21();
                push(goTo(7), list);
            }
            break;
            case 22: /* reduce AAfExpression7 */
            {
                ArrayList<Object> list = new22();
                push(goTo(7), list);
            }
            break;
            case 23: /* reduce ALireExpression7 */
            {
                ArrayList<Object> list = new23();
                push(goTo(7), list);
            }
            break;
            case 24: /* reduce AListeExListeExpressions */
            {
                ArrayList<Object> list = new24();
                push(goTo(8), list);
            }
            break;
            case 25: /* reduce AVideListeExpressions */
            {
                ArrayList<Object> list = new25();
                push(goTo(8), list);
            }
            break;
            case 26: /* reduce AVirguleListeExpressionsNext */
            {
                ArrayList<Object> list = new26();
                push(goTo(9), list);
            }
            break;
            case 27: /* reduce AVideListeExpressionsNext */
            {
                ArrayList<Object> list = new27();
                push(goTo(9), list);
            }
            break;
            case 28: /* reduce AAffectInstruction */
            {
                ArrayList<Object> list = new28();
                push(goTo(10), list);
            }
            break;
            case 29: /* reduce ATantqueInstruction */
            {
                ArrayList<Object> list = new29();
                push(goTo(10), list);
            }
            break;
            case 30: /* reduce ASiInstruction */
            {
                ArrayList<Object> list = new30();
                push(goTo(10), list);
            }
            break;
            case 31: /* reduce ASinonInstruction */
            {
                ArrayList<Object> list = new31();
                push(goTo(10), list);
            }
            break;
            case 32: /* reduce AAppelFonInstruction */
            {
                ArrayList<Object> list = new32();
                push(goTo(10), list);
            }
            break;
            case 33: /* reduce AEcrireInstruction */
            {
                ArrayList<Object> list = new33();
                push(goTo(10), list);
            }
            break;
            case 34: /* reduce AResultFoncInstruction */
            {
                ArrayList<Object> list = new34();
                push(goTo(10), list);
            }
            break;
            case 35: /* reduce ABlocIntBlocInstructions */
            {
                ArrayList<Object> list = new35();
                push(goTo(11), list);
            }
            break;
            case 36: /* reduce AListeIntListeInstructions */
            {
                ArrayList<Object> list = new36();
                push(goTo(12), list);
            }
            break;
            case 37: /* reduce AVideListeInstructions */
            {
                ArrayList<Object> list = new37();
                push(goTo(12), list);
            }
            break;
            case 38: /* reduce ASimpleVar */
            {
                ArrayList<Object> list = new38();
                push(goTo(13), list);
            }
            break;
            case 39: /* reduce ATableauVar */
            {
                ArrayList<Object> list = new39();
                push(goTo(13), list);
            }
            break;
            case 40: /* reduce ADecSimpleDeclarVar */
            {
                ArrayList<Object> list = new40();
                push(goTo(14), list);
            }
            break;
            case 41: /* reduce ADecTableauDeclarVar */
            {
                ArrayList<Object> list = new41();
                push(goTo(14), list);
            }
            break;
            case 42: /* reduce ABoolType */
            {
                ArrayList<Object> list = new42();
                push(goTo(15), list);
            }
            break;
            case 43: /* reduce AEntierType */
            {
                ArrayList<Object> list = new43();
                push(goTo(15), list);
            }
            break;
            case 44: /* reduce ADeclarationFunction$Variable1$Variable2$Type1DeclarationFunction */
            {
                ArrayList<Object> list = new44();
                push(goTo(16), list);
            }
            break;
            case 45: /* reduce ADeclarationFunction$Variable1$Variable2$Vide1DeclarationFunction */
            {
                ArrayList<Object> list = new45();
                push(goTo(16), list);
            }
            break;
            case 46: /* reduce ADeclarationFunction$Variable1$Vide2$Type1DeclarationFunction */
            {
                ArrayList<Object> list = new46();
                push(goTo(16), list);
            }
            break;
            case 47: /* reduce ADeclarationFunction$Variable1$Vide2$Vide1DeclarationFunction */
            {
                ArrayList<Object> list = new47();
                push(goTo(16), list);
            }
            break;
            case 48: /* reduce ADeclarationFunction$Vide1$Variable2$Type1DeclarationFunction */
            {
                ArrayList<Object> list = new48();
                push(goTo(16), list);
            }
            break;
            case 49: /* reduce ADeclarationFunction$Vide1$Variable2$Vide1DeclarationFunction */
            {
                ArrayList<Object> list = new49();
                push(goTo(16), list);
            }
            break;
            case 50: /* reduce ADeclarationFunction$Vide1$Vide2$Type1DeclarationFunction */
            {
                ArrayList<Object> list = new50();
                push(goTo(16), list);
            }
            break;
            case 51: /* reduce ADeclarationFunction$Vide1$Vide2$Vide1DeclarationFunction */
            {
                ArrayList<Object> list = new51();
                push(goTo(16), list);
            }
            break;
            case 52: /* reduce AVirguleVarListDeclarationVariableNext */
            {
                ArrayList<Object> list = new52();
                push(goTo(17), list);
            }
            break;
            case 53: /* reduce AVideListDeclarationVariableNext */
            {
                ArrayList<Object> list = new53();
                push(goTo(17), list);
            }
            break;
            case 54: /* reduce AListDeclarationFunctionListDeclarationFunction */
            {
                ArrayList<Object> list = new54();
                push(goTo(18), list);
            }
            break;
            case 55: /* reduce AVideListDeclarationFunction */
            {
                ArrayList<Object> list = new55();
                push(goTo(18), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AProgramme$Variable1Programme */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramme pprogrammeNode1;
        {
            // Block
        PListDeclarationVariable plistdeclarationvariableNode2;
        PListDeclarationFunction plistdeclarationfunctionNode5;
        {
            // Block
        PDeclarVar pdeclarvarNode3;
        PListDeclarationVariableNext plistdeclarationvariablenextNode4;
        pdeclarvarNode3 = (PDeclarVar)nodeArrayList1.get(0);
        plistdeclarationvariablenextNode4 = (PListDeclarationVariableNext)nodeArrayList2.get(0);

        plistdeclarationvariableNode2 = new AVariableListDeclarationVariable(pdeclarvarNode3, plistdeclarationvariablenextNode4);
        }
        plistdeclarationfunctionNode5 = (PListDeclarationFunction)nodeArrayList3.get(0);

        pprogrammeNode1 = new AProgrammeProgramme(plistdeclarationvariableNode2, plistdeclarationfunctionNode5);
        }
	nodeList.add(pprogrammeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AProgramme$Vide1Programme */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramme pprogrammeNode1;
        {
            // Block
        PListDeclarationVariable plistdeclarationvariableNode2;
        PListDeclarationFunction plistdeclarationfunctionNode3;
        {
            // Block

        plistdeclarationvariableNode2 = new AVideListDeclarationVariable();
        }
        plistdeclarationfunctionNode3 = (PListDeclarationFunction)nodeArrayList1.get(0);

        pprogrammeNode1 = new AProgrammeProgramme(plistdeclarationvariableNode2, plistdeclarationfunctionNode3);
        }
	nodeList.add(pprogrammeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AOuExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TOu touNode3;
        PExpression2 pexpression2Node4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        touNode3 = (TOu)nodeArrayList2.get(0);
        pexpression2Node4 = (PExpression2)nodeArrayList3.get(0);

        pexpressionNode1 = new AOuExpression(pexpressionNode2, touNode3, pexpression2Node4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AP2Expression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression2 pexpression2Node2;
        pexpression2Node2 = (PExpression2)nodeArrayList1.get(0);

        pexpressionNode1 = new AP2Expression(pexpression2Node2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AEtExpression2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression2 pexpression2Node1;
        {
            // Block
        PExpression2 pexpression2Node2;
        TEt tetNode3;
        PExpression3 pexpression3Node4;
        pexpression2Node2 = (PExpression2)nodeArrayList1.get(0);
        tetNode3 = (TEt)nodeArrayList2.get(0);
        pexpression3Node4 = (PExpression3)nodeArrayList3.get(0);

        pexpression2Node1 = new AEtExpression2(pexpression2Node2, tetNode3, pexpression3Node4);
        }
	nodeList.add(pexpression2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AP3Expression2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression2 pexpression2Node1;
        {
            // Block
        PExpression3 pexpression3Node2;
        pexpression3Node2 = (PExpression3)nodeArrayList1.get(0);

        pexpression2Node1 = new AP3Expression2(pexpression3Node2);
        }
	nodeList.add(pexpression2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AEquExpression3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression3 pexpression3Node1;
        {
            // Block
        PExpression3 pexpression3Node2;
        TEqu tequNode3;
        PExpression4 pexpression4Node4;
        pexpression3Node2 = (PExpression3)nodeArrayList1.get(0);
        tequNode3 = (TEqu)nodeArrayList2.get(0);
        pexpression4Node4 = (PExpression4)nodeArrayList3.get(0);

        pexpression3Node1 = new AEquExpression3(pexpression3Node2, tequNode3, pexpression4Node4);
        }
	nodeList.add(pexpression3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AInfExpression3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression3 pexpression3Node1;
        {
            // Block
        PExpression3 pexpression3Node2;
        TInf tinfNode3;
        PExpression4 pexpression4Node4;
        pexpression3Node2 = (PExpression3)nodeArrayList1.get(0);
        tinfNode3 = (TInf)nodeArrayList2.get(0);
        pexpression4Node4 = (PExpression4)nodeArrayList3.get(0);

        pexpression3Node1 = new AInfExpression3(pexpression3Node2, tinfNode3, pexpression4Node4);
        }
	nodeList.add(pexpression3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AP4Expression3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression3 pexpression3Node1;
        {
            // Block
        PExpression4 pexpression4Node2;
        pexpression4Node2 = (PExpression4)nodeArrayList1.get(0);

        pexpression3Node1 = new AP4Expression3(pexpression4Node2);
        }
	nodeList.add(pexpression3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce APlusExpression4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression4 pexpression4Node1;
        {
            // Block
        PExpression4 pexpression4Node2;
        TPlus tplusNode3;
        PExpression5 pexpression5Node4;
        pexpression4Node2 = (PExpression4)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pexpression5Node4 = (PExpression5)nodeArrayList3.get(0);

        pexpression4Node1 = new APlusExpression4(pexpression4Node2, tplusNode3, pexpression5Node4);
        }
	nodeList.add(pexpression4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AMoinsExpression4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression4 pexpression4Node1;
        {
            // Block
        PExpression4 pexpression4Node2;
        TMoins tmoinsNode3;
        PExpression5 pexpression5Node4;
        pexpression4Node2 = (PExpression4)nodeArrayList1.get(0);
        tmoinsNode3 = (TMoins)nodeArrayList2.get(0);
        pexpression5Node4 = (PExpression5)nodeArrayList3.get(0);

        pexpression4Node1 = new AMoinsExpression4(pexpression4Node2, tmoinsNode3, pexpression5Node4);
        }
	nodeList.add(pexpression4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AP5Expression4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression4 pexpression4Node1;
        {
            // Block
        PExpression5 pexpression5Node2;
        pexpression5Node2 = (PExpression5)nodeArrayList1.get(0);

        pexpression4Node1 = new AP5Expression4(pexpression5Node2);
        }
	nodeList.add(pexpression4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AMultExpression5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression5 pexpression5Node1;
        {
            // Block
        PExpression5 pexpression5Node2;
        TMult tmultNode3;
        PExpression6 pexpression6Node4;
        pexpression5Node2 = (PExpression5)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        pexpression6Node4 = (PExpression6)nodeArrayList3.get(0);

        pexpression5Node1 = new AMultExpression5(pexpression5Node2, tmultNode3, pexpression6Node4);
        }
	nodeList.add(pexpression5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ADivExpression5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression5 pexpression5Node1;
        {
            // Block
        PExpression5 pexpression5Node2;
        TDiv tdivNode3;
        PExpression6 pexpression6Node4;
        pexpression5Node2 = (PExpression5)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        pexpression6Node4 = (PExpression6)nodeArrayList3.get(0);

        pexpression5Node1 = new ADivExpression5(pexpression5Node2, tdivNode3, pexpression6Node4);
        }
	nodeList.add(pexpression5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AP6Expression5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression5 pexpression5Node1;
        {
            // Block
        PExpression6 pexpression6Node2;
        pexpression6Node2 = (PExpression6)nodeArrayList1.get(0);

        pexpression5Node1 = new AP6Expression5(pexpression6Node2);
        }
	nodeList.add(pexpression5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ANonExpression6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression6 pexpression6Node1;
        {
            // Block
        TNon tnonNode2;
        PExpression6 pexpression6Node3;
        tnonNode2 = (TNon)nodeArrayList1.get(0);
        pexpression6Node3 = (PExpression6)nodeArrayList2.get(0);

        pexpression6Node1 = new ANonExpression6(tnonNode2, pexpression6Node3);
        }
	nodeList.add(pexpression6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AP7Expression6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression6 pexpression6Node1;
        {
            // Block
        PExpression7 pexpression7Node2;
        pexpression7Node2 = (PExpression7)nodeArrayList1.get(0);

        pexpression6Node1 = new AP7Expression6(pexpression7Node2);
        }
	nodeList.add(pexpression6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AParenteseExpression7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression7 pexpression7Node1;
        {
            // Block
        TLPar tlparNode2;
        PExpression pexpressionNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pexpression7Node1 = new AParenteseExpression7(tlparNode2, pexpressionNode3, trparNode4);
        }
	nodeList.add(pexpression7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ANombreExpression7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression7 pexpression7Node1;
        {
            // Block
        TNombre tnombreNode2;
        tnombreNode2 = (TNombre)nodeArrayList1.get(0);

        pexpression7Node1 = new ANombreExpression7(tnombreNode2);
        }
	nodeList.add(pexpression7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AVraiExpression7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression7 pexpression7Node1;
        {
            // Block
        TVrai tvraiNode2;
        tvraiNode2 = (TVrai)nodeArrayList1.get(0);

        pexpression7Node1 = new AVraiExpression7(tvraiNode2);
        }
	nodeList.add(pexpression7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AFauxExpression7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression7 pexpression7Node1;
        {
            // Block
        TFaux tfauxNode2;
        tfauxNode2 = (TFaux)nodeArrayList1.get(0);

        pexpression7Node1 = new AFauxExpression7(tfauxNode2);
        }
	nodeList.add(pexpression7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AVarExpression7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression7 pexpression7Node1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        pexpression7Node1 = new AVarExpression7(pvarNode2);
        }
	nodeList.add(pexpression7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AAfExpression7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression7 pexpression7Node1;
        {
            // Block
        TIdentifiant tidentifiantNode2;
        TLPar tlparNode3;
        PListeExpressions plisteexpressionsNode4;
        TRPar trparNode5;
        tidentifiantNode2 = (TIdentifiant)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        plisteexpressionsNode4 = (PListeExpressions)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pexpression7Node1 = new AAfExpression7(tidentifiantNode2, tlparNode3, plisteexpressionsNode4, trparNode5);
        }
	nodeList.add(pexpression7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ALireExpression7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression7 pexpression7Node1;
        {
            // Block
        TLire tlireNode2;
        tlireNode2 = (TLire)nodeArrayList1.get(0);

        pexpression7Node1 = new ALireExpression7(tlireNode2);
        }
	nodeList.add(pexpression7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AListeExListeExpressions */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListeExpressions plisteexpressionsNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PListeExpressionsNext plisteexpressionsnextNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        plisteexpressionsnextNode3 = (PListeExpressionsNext)nodeArrayList2.get(0);

        plisteexpressionsNode1 = new AListeExListeExpressions(pexpressionNode2, plisteexpressionsnextNode3);
        }
	nodeList.add(plisteexpressionsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AVideListeExpressions */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListeExpressions plisteexpressionsNode1;
        {
            // Block

        plisteexpressionsNode1 = new AVideListeExpressions();
        }
	nodeList.add(plisteexpressionsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AVirguleListeExpressionsNext */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListeExpressionsNext plisteexpressionsnextNode1;
        {
            // Block
        TVirgule tvirguleNode2;
        PExpression pexpressionNode3;
        PListeExpressionsNext plisteexpressionsnextNode4;
        tvirguleNode2 = (TVirgule)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        plisteexpressionsnextNode4 = (PListeExpressionsNext)nodeArrayList3.get(0);

        plisteexpressionsnextNode1 = new AVirguleListeExpressionsNext(tvirguleNode2, pexpressionNode3, plisteexpressionsnextNode4);
        }
	nodeList.add(plisteexpressionsnextNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AVideListeExpressionsNext */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListeExpressionsNext plisteexpressionsnextNode1;
        {
            // Block

        plisteexpressionsnextNode1 = new AVideListeExpressionsNext();
        }
	nodeList.add(plisteexpressionsnextNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AAffectInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        PVar pvarNode2;
        TEqu tequNode3;
        PExpression pexpressionNode4;
        TPVirgule tpvirguleNode5;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        tequNode3 = (TEqu)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        tpvirguleNode5 = (TPVirgule)nodeArrayList4.get(0);

        pinstructionNode1 = new AAffectInstruction(pvarNode2, tequNode3, pexpressionNode4, tpvirguleNode5);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ATantqueInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        TTantque ttantqueNode2;
        PExpression pexpressionNode3;
        TFaire tfaireNode4;
        PBlocInstructions pblocinstructionsNode5;
        ttantqueNode2 = (TTantque)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tfaireNode4 = (TFaire)nodeArrayList3.get(0);
        pblocinstructionsNode5 = (PBlocInstructions)nodeArrayList4.get(0);

        pinstructionNode1 = new ATantqueInstruction(ttantqueNode2, pexpressionNode3, tfaireNode4, pblocinstructionsNode5);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ASiInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        TSi tsiNode2;
        PExpression pexpressionNode3;
        TAlors talorsNode4;
        PBlocInstructions pblocinstructionsNode5;
        tsiNode2 = (TSi)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        talorsNode4 = (TAlors)nodeArrayList3.get(0);
        pblocinstructionsNode5 = (PBlocInstructions)nodeArrayList4.get(0);

        pinstructionNode1 = new ASiInstruction(tsiNode2, pexpressionNode3, talorsNode4, pblocinstructionsNode5);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ASinonInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        TSi tsiNode2;
        PExpression pexpressionNode3;
        TAlors talorsNode4;
        PBlocInstructions pblocinstructionsNode5;
        TSinon tsinonNode6;
        PBlocInstructions pblocinstructionsNode7;
        tsiNode2 = (TSi)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        talorsNode4 = (TAlors)nodeArrayList3.get(0);
        pblocinstructionsNode5 = (PBlocInstructions)nodeArrayList4.get(0);
        tsinonNode6 = (TSinon)nodeArrayList5.get(0);
        pblocinstructionsNode7 = (PBlocInstructions)nodeArrayList6.get(0);

        pinstructionNode1 = new ASinonInstruction(tsiNode2, pexpressionNode3, talorsNode4, pblocinstructionsNode5, tsinonNode6, pblocinstructionsNode7);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AAppelFonInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        TIdentifiant tidentifiantNode2;
        TLPar tlparNode3;
        PListeExpressions plisteexpressionsNode4;
        TRPar trparNode5;
        TPVirgule tpvirguleNode6;
        tidentifiantNode2 = (TIdentifiant)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        plisteexpressionsNode4 = (PListeExpressions)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tpvirguleNode6 = (TPVirgule)nodeArrayList5.get(0);

        pinstructionNode1 = new AAppelFonInstruction(tidentifiantNode2, tlparNode3, plisteexpressionsNode4, trparNode5, tpvirguleNode6);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AEcrireInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        TEcrire tecrireNode2;
        TLPar tlparNode3;
        PExpression pexpressionNode4;
        TRPar trparNode5;
        TPVirgule tpvirguleNode6;
        tecrireNode2 = (TEcrire)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tpvirguleNode6 = (TPVirgule)nodeArrayList5.get(0);

        pinstructionNode1 = new AEcrireInstruction(tecrireNode2, tlparNode3, pexpressionNode4, trparNode5, tpvirguleNode6);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AResultFoncInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        TRetour tretourNode2;
        PExpression pexpressionNode3;
        TPVirgule tpvirguleNode4;
        tretourNode2 = (TRetour)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tpvirguleNode4 = (TPVirgule)nodeArrayList3.get(0);

        pinstructionNode1 = new AResultFoncInstruction(tretourNode2, pexpressionNode3, tpvirguleNode4);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce ABlocIntBlocInstructions */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlocInstructions pblocinstructionsNode1;
        {
            // Block
        TLBrace tlbraceNode2;
        PListeInstructions plisteinstructionsNode3;
        TRBrace trbraceNode4;
        tlbraceNode2 = (TLBrace)nodeArrayList1.get(0);
        plisteinstructionsNode3 = (PListeInstructions)nodeArrayList2.get(0);
        trbraceNode4 = (TRBrace)nodeArrayList3.get(0);

        pblocinstructionsNode1 = new ABlocIntBlocInstructions(tlbraceNode2, plisteinstructionsNode3, trbraceNode4);
        }
	nodeList.add(pblocinstructionsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AListeIntListeInstructions */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListeInstructions plisteinstructionsNode1;
        {
            // Block
        PInstruction pinstructionNode2;
        PListeInstructions plisteinstructionsNode3;
        pinstructionNode2 = (PInstruction)nodeArrayList1.get(0);
        plisteinstructionsNode3 = (PListeInstructions)nodeArrayList2.get(0);

        plisteinstructionsNode1 = new AListeIntListeInstructions(pinstructionNode2, plisteinstructionsNode3);
        }
	nodeList.add(plisteinstructionsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AVideListeInstructions */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListeInstructions plisteinstructionsNode1;
        {
            // Block

        plisteinstructionsNode1 = new AVideListeInstructions();
        }
	nodeList.add(plisteinstructionsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce ASimpleVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TIdentifiant tidentifiantNode2;
        tidentifiantNode2 = (TIdentifiant)nodeArrayList1.get(0);

        pvarNode1 = new ASimpleVar(tidentifiantNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ATableauVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TIdentifiant tidentifiantNode2;
        TLBracket tlbracketNode3;
        PExpression pexpressionNode4;
        TRBracket trbracketNode5;
        tidentifiantNode2 = (TIdentifiant)nodeArrayList1.get(0);
        tlbracketNode3 = (TLBracket)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trbracketNode5 = (TRBracket)nodeArrayList4.get(0);

        pvarNode1 = new ATableauVar(tidentifiantNode2, tlbracketNode3, pexpressionNode4, trbracketNode5);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce ADecSimpleDeclarVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclarVar pdeclarvarNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentifiant tidentifiantNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifiantNode3 = (TIdentifiant)nodeArrayList2.get(0);

        pdeclarvarNode1 = new ADecSimpleDeclarVar(ptypeNode2, tidentifiantNode3);
        }
	nodeList.add(pdeclarvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ADecTableauDeclarVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclarVar pdeclarvarNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentifiant tidentifiantNode3;
        TLBracket tlbracketNode4;
        TNombre tnombreNode5;
        TRBracket trbracketNode6;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifiantNode3 = (TIdentifiant)nodeArrayList2.get(0);
        tlbracketNode4 = (TLBracket)nodeArrayList3.get(0);
        tnombreNode5 = (TNombre)nodeArrayList4.get(0);
        trbracketNode6 = (TRBracket)nodeArrayList5.get(0);

        pdeclarvarNode1 = new ADecTableauDeclarVar(ptypeNode2, tidentifiantNode3, tlbracketNode4, tnombreNode5, trbracketNode6);
        }
	nodeList.add(pdeclarvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ABoolType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TBool tboolNode2;
        tboolNode2 = (TBool)nodeArrayList1.get(0);

        ptypeNode1 = new ABoolType(tboolNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AEntierType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TEntier tentierNode2;
        tentierNode2 = (TEntier)nodeArrayList1.get(0);

        ptypeNode1 = new AEntierType(tentierNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce ADeclarationFunction$Variable1$Variable2$Type1DeclarationFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclarationFunction pdeclarationfunctionNode1;
        {
            // Block
        PTypeOption ptypeoptionNode2;
        TIdentifiant tidentifiantNode4;
        TLPar tlparNode5;
        PListDeclarationVariable plistdeclarationvariableNode6;
        TRPar trparNode9;
        PListDeclarationVariable plistdeclarationvariableNode10;
        PBlocInstructions pblocinstructionsNode13;
        {
            // Block
        PType ptypeNode3;
        ptypeNode3 = (PType)nodeArrayList1.get(0);

        ptypeoptionNode2 = new ATypeTypeOption(ptypeNode3);
        }
        tidentifiantNode4 = (TIdentifiant)nodeArrayList2.get(0);
        tlparNode5 = (TLPar)nodeArrayList3.get(0);
        {
            // Block
        PDeclarVar pdeclarvarNode7;
        PListDeclarationVariableNext plistdeclarationvariablenextNode8;
        pdeclarvarNode7 = (PDeclarVar)nodeArrayList4.get(0);
        plistdeclarationvariablenextNode8 = (PListDeclarationVariableNext)nodeArrayList5.get(0);

        plistdeclarationvariableNode6 = new AVariableListDeclarationVariable(pdeclarvarNode7, plistdeclarationvariablenextNode8);
        }
        trparNode9 = (TRPar)nodeArrayList6.get(0);
        {
            // Block
        PDeclarVar pdeclarvarNode11;
        PListDeclarationVariableNext plistdeclarationvariablenextNode12;
        pdeclarvarNode11 = (PDeclarVar)nodeArrayList7.get(0);
        plistdeclarationvariablenextNode12 = (PListDeclarationVariableNext)nodeArrayList8.get(0);

        plistdeclarationvariableNode10 = new AVariableListDeclarationVariable(pdeclarvarNode11, plistdeclarationvariablenextNode12);
        }
        pblocinstructionsNode13 = (PBlocInstructions)nodeArrayList9.get(0);

        pdeclarationfunctionNode1 = new ADeclarationFunctionDeclarationFunction(ptypeoptionNode2, tidentifiantNode4, tlparNode5, plistdeclarationvariableNode6, trparNode9, plistdeclarationvariableNode10, pblocinstructionsNode13);
        }
	nodeList.add(pdeclarationfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ADeclarationFunction$Variable1$Variable2$Vide1DeclarationFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclarationFunction pdeclarationfunctionNode1;
        {
            // Block
        PTypeOption ptypeoptionNode2;
        TIdentifiant tidentifiantNode3;
        TLPar tlparNode4;
        PListDeclarationVariable plistdeclarationvariableNode5;
        TRPar trparNode8;
        PListDeclarationVariable plistdeclarationvariableNode9;
        PBlocInstructions pblocinstructionsNode12;
        {
            // Block

        ptypeoptionNode2 = new AVideTypeOption();
        }
        tidentifiantNode3 = (TIdentifiant)nodeArrayList1.get(0);
        tlparNode4 = (TLPar)nodeArrayList2.get(0);
        {
            // Block
        PDeclarVar pdeclarvarNode6;
        PListDeclarationVariableNext plistdeclarationvariablenextNode7;
        pdeclarvarNode6 = (PDeclarVar)nodeArrayList3.get(0);
        plistdeclarationvariablenextNode7 = (PListDeclarationVariableNext)nodeArrayList4.get(0);

        plistdeclarationvariableNode5 = new AVariableListDeclarationVariable(pdeclarvarNode6, plistdeclarationvariablenextNode7);
        }
        trparNode8 = (TRPar)nodeArrayList5.get(0);
        {
            // Block
        PDeclarVar pdeclarvarNode10;
        PListDeclarationVariableNext plistdeclarationvariablenextNode11;
        pdeclarvarNode10 = (PDeclarVar)nodeArrayList6.get(0);
        plistdeclarationvariablenextNode11 = (PListDeclarationVariableNext)nodeArrayList7.get(0);

        plistdeclarationvariableNode9 = new AVariableListDeclarationVariable(pdeclarvarNode10, plistdeclarationvariablenextNode11);
        }
        pblocinstructionsNode12 = (PBlocInstructions)nodeArrayList8.get(0);

        pdeclarationfunctionNode1 = new ADeclarationFunctionDeclarationFunction(ptypeoptionNode2, tidentifiantNode3, tlparNode4, plistdeclarationvariableNode5, trparNode8, plistdeclarationvariableNode9, pblocinstructionsNode12);
        }
	nodeList.add(pdeclarationfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce ADeclarationFunction$Variable1$Vide2$Type1DeclarationFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclarationFunction pdeclarationfunctionNode1;
        {
            // Block
        PTypeOption ptypeoptionNode2;
        TIdentifiant tidentifiantNode4;
        TLPar tlparNode5;
        PListDeclarationVariable plistdeclarationvariableNode6;
        TRPar trparNode9;
        PListDeclarationVariable plistdeclarationvariableNode10;
        PBlocInstructions pblocinstructionsNode11;
        {
            // Block
        PType ptypeNode3;
        ptypeNode3 = (PType)nodeArrayList1.get(0);

        ptypeoptionNode2 = new ATypeTypeOption(ptypeNode3);
        }
        tidentifiantNode4 = (TIdentifiant)nodeArrayList2.get(0);
        tlparNode5 = (TLPar)nodeArrayList3.get(0);
        {
            // Block
        PDeclarVar pdeclarvarNode7;
        PListDeclarationVariableNext plistdeclarationvariablenextNode8;
        pdeclarvarNode7 = (PDeclarVar)nodeArrayList4.get(0);
        plistdeclarationvariablenextNode8 = (PListDeclarationVariableNext)nodeArrayList5.get(0);

        plistdeclarationvariableNode6 = new AVariableListDeclarationVariable(pdeclarvarNode7, plistdeclarationvariablenextNode8);
        }
        trparNode9 = (TRPar)nodeArrayList6.get(0);
        {
            // Block

        plistdeclarationvariableNode10 = new AVideListDeclarationVariable();
        }
        pblocinstructionsNode11 = (PBlocInstructions)nodeArrayList7.get(0);

        pdeclarationfunctionNode1 = new ADeclarationFunctionDeclarationFunction(ptypeoptionNode2, tidentifiantNode4, tlparNode5, plistdeclarationvariableNode6, trparNode9, plistdeclarationvariableNode10, pblocinstructionsNode11);
        }
	nodeList.add(pdeclarationfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ADeclarationFunction$Variable1$Vide2$Vide1DeclarationFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclarationFunction pdeclarationfunctionNode1;
        {
            // Block
        PTypeOption ptypeoptionNode2;
        TIdentifiant tidentifiantNode3;
        TLPar tlparNode4;
        PListDeclarationVariable plistdeclarationvariableNode5;
        TRPar trparNode8;
        PListDeclarationVariable plistdeclarationvariableNode9;
        PBlocInstructions pblocinstructionsNode10;
        {
            // Block

        ptypeoptionNode2 = new AVideTypeOption();
        }
        tidentifiantNode3 = (TIdentifiant)nodeArrayList1.get(0);
        tlparNode4 = (TLPar)nodeArrayList2.get(0);
        {
            // Block
        PDeclarVar pdeclarvarNode6;
        PListDeclarationVariableNext plistdeclarationvariablenextNode7;
        pdeclarvarNode6 = (PDeclarVar)nodeArrayList3.get(0);
        plistdeclarationvariablenextNode7 = (PListDeclarationVariableNext)nodeArrayList4.get(0);

        plistdeclarationvariableNode5 = new AVariableListDeclarationVariable(pdeclarvarNode6, plistdeclarationvariablenextNode7);
        }
        trparNode8 = (TRPar)nodeArrayList5.get(0);
        {
            // Block

        plistdeclarationvariableNode9 = new AVideListDeclarationVariable();
        }
        pblocinstructionsNode10 = (PBlocInstructions)nodeArrayList6.get(0);

        pdeclarationfunctionNode1 = new ADeclarationFunctionDeclarationFunction(ptypeoptionNode2, tidentifiantNode3, tlparNode4, plistdeclarationvariableNode5, trparNode8, plistdeclarationvariableNode9, pblocinstructionsNode10);
        }
	nodeList.add(pdeclarationfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce ADeclarationFunction$Vide1$Variable2$Type1DeclarationFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclarationFunction pdeclarationfunctionNode1;
        {
            // Block
        PTypeOption ptypeoptionNode2;
        TIdentifiant tidentifiantNode4;
        TLPar tlparNode5;
        PListDeclarationVariable plistdeclarationvariableNode6;
        TRPar trparNode7;
        PListDeclarationVariable plistdeclarationvariableNode8;
        PBlocInstructions pblocinstructionsNode11;
        {
            // Block
        PType ptypeNode3;
        ptypeNode3 = (PType)nodeArrayList1.get(0);

        ptypeoptionNode2 = new ATypeTypeOption(ptypeNode3);
        }
        tidentifiantNode4 = (TIdentifiant)nodeArrayList2.get(0);
        tlparNode5 = (TLPar)nodeArrayList3.get(0);
        {
            // Block

        plistdeclarationvariableNode6 = new AVideListDeclarationVariable();
        }
        trparNode7 = (TRPar)nodeArrayList4.get(0);
        {
            // Block
        PDeclarVar pdeclarvarNode9;
        PListDeclarationVariableNext plistdeclarationvariablenextNode10;
        pdeclarvarNode9 = (PDeclarVar)nodeArrayList5.get(0);
        plistdeclarationvariablenextNode10 = (PListDeclarationVariableNext)nodeArrayList6.get(0);

        plistdeclarationvariableNode8 = new AVariableListDeclarationVariable(pdeclarvarNode9, plistdeclarationvariablenextNode10);
        }
        pblocinstructionsNode11 = (PBlocInstructions)nodeArrayList7.get(0);

        pdeclarationfunctionNode1 = new ADeclarationFunctionDeclarationFunction(ptypeoptionNode2, tidentifiantNode4, tlparNode5, plistdeclarationvariableNode6, trparNode7, plistdeclarationvariableNode8, pblocinstructionsNode11);
        }
	nodeList.add(pdeclarationfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce ADeclarationFunction$Vide1$Variable2$Vide1DeclarationFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclarationFunction pdeclarationfunctionNode1;
        {
            // Block
        PTypeOption ptypeoptionNode2;
        TIdentifiant tidentifiantNode3;
        TLPar tlparNode4;
        PListDeclarationVariable plistdeclarationvariableNode5;
        TRPar trparNode6;
        PListDeclarationVariable plistdeclarationvariableNode7;
        PBlocInstructions pblocinstructionsNode10;
        {
            // Block

        ptypeoptionNode2 = new AVideTypeOption();
        }
        tidentifiantNode3 = (TIdentifiant)nodeArrayList1.get(0);
        tlparNode4 = (TLPar)nodeArrayList2.get(0);
        {
            // Block

        plistdeclarationvariableNode5 = new AVideListDeclarationVariable();
        }
        trparNode6 = (TRPar)nodeArrayList3.get(0);
        {
            // Block
        PDeclarVar pdeclarvarNode8;
        PListDeclarationVariableNext plistdeclarationvariablenextNode9;
        pdeclarvarNode8 = (PDeclarVar)nodeArrayList4.get(0);
        plistdeclarationvariablenextNode9 = (PListDeclarationVariableNext)nodeArrayList5.get(0);

        plistdeclarationvariableNode7 = new AVariableListDeclarationVariable(pdeclarvarNode8, plistdeclarationvariablenextNode9);
        }
        pblocinstructionsNode10 = (PBlocInstructions)nodeArrayList6.get(0);

        pdeclarationfunctionNode1 = new ADeclarationFunctionDeclarationFunction(ptypeoptionNode2, tidentifiantNode3, tlparNode4, plistdeclarationvariableNode5, trparNode6, plistdeclarationvariableNode7, pblocinstructionsNode10);
        }
	nodeList.add(pdeclarationfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce ADeclarationFunction$Vide1$Vide2$Type1DeclarationFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclarationFunction pdeclarationfunctionNode1;
        {
            // Block
        PTypeOption ptypeoptionNode2;
        TIdentifiant tidentifiantNode4;
        TLPar tlparNode5;
        PListDeclarationVariable plistdeclarationvariableNode6;
        TRPar trparNode7;
        PListDeclarationVariable plistdeclarationvariableNode8;
        PBlocInstructions pblocinstructionsNode9;
        {
            // Block
        PType ptypeNode3;
        ptypeNode3 = (PType)nodeArrayList1.get(0);

        ptypeoptionNode2 = new ATypeTypeOption(ptypeNode3);
        }
        tidentifiantNode4 = (TIdentifiant)nodeArrayList2.get(0);
        tlparNode5 = (TLPar)nodeArrayList3.get(0);
        {
            // Block

        plistdeclarationvariableNode6 = new AVideListDeclarationVariable();
        }
        trparNode7 = (TRPar)nodeArrayList4.get(0);
        {
            // Block

        plistdeclarationvariableNode8 = new AVideListDeclarationVariable();
        }
        pblocinstructionsNode9 = (PBlocInstructions)nodeArrayList5.get(0);

        pdeclarationfunctionNode1 = new ADeclarationFunctionDeclarationFunction(ptypeoptionNode2, tidentifiantNode4, tlparNode5, plistdeclarationvariableNode6, trparNode7, plistdeclarationvariableNode8, pblocinstructionsNode9);
        }
	nodeList.add(pdeclarationfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ADeclarationFunction$Vide1$Vide2$Vide1DeclarationFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclarationFunction pdeclarationfunctionNode1;
        {
            // Block
        PTypeOption ptypeoptionNode2;
        TIdentifiant tidentifiantNode3;
        TLPar tlparNode4;
        PListDeclarationVariable plistdeclarationvariableNode5;
        TRPar trparNode6;
        PListDeclarationVariable plistdeclarationvariableNode7;
        PBlocInstructions pblocinstructionsNode8;
        {
            // Block

        ptypeoptionNode2 = new AVideTypeOption();
        }
        tidentifiantNode3 = (TIdentifiant)nodeArrayList1.get(0);
        tlparNode4 = (TLPar)nodeArrayList2.get(0);
        {
            // Block

        plistdeclarationvariableNode5 = new AVideListDeclarationVariable();
        }
        trparNode6 = (TRPar)nodeArrayList3.get(0);
        {
            // Block

        plistdeclarationvariableNode7 = new AVideListDeclarationVariable();
        }
        pblocinstructionsNode8 = (PBlocInstructions)nodeArrayList4.get(0);

        pdeclarationfunctionNode1 = new ADeclarationFunctionDeclarationFunction(ptypeoptionNode2, tidentifiantNode3, tlparNode4, plistdeclarationvariableNode5, trparNode6, plistdeclarationvariableNode7, pblocinstructionsNode8);
        }
	nodeList.add(pdeclarationfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AVirguleVarListDeclarationVariableNext */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListDeclarationVariableNext plistdeclarationvariablenextNode1;
        {
            // Block
        TVirgule tvirguleNode2;
        PDeclarVar pdeclarvarNode3;
        PListDeclarationVariableNext plistdeclarationvariablenextNode4;
        tvirguleNode2 = (TVirgule)nodeArrayList1.get(0);
        pdeclarvarNode3 = (PDeclarVar)nodeArrayList2.get(0);
        plistdeclarationvariablenextNode4 = (PListDeclarationVariableNext)nodeArrayList3.get(0);

        plistdeclarationvariablenextNode1 = new AVirguleVarListDeclarationVariableNext(tvirguleNode2, pdeclarvarNode3, plistdeclarationvariablenextNode4);
        }
	nodeList.add(plistdeclarationvariablenextNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AVideListDeclarationVariableNext */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListDeclarationVariableNext plistdeclarationvariablenextNode1;
        {
            // Block

        plistdeclarationvariablenextNode1 = new AVideListDeclarationVariableNext();
        }
	nodeList.add(plistdeclarationvariablenextNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AListDeclarationFunctionListDeclarationFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListDeclarationFunction plistdeclarationfunctionNode1;
        {
            // Block
        PDeclarationFunction pdeclarationfunctionNode2;
        PListDeclarationFunction plistdeclarationfunctionNode3;
        pdeclarationfunctionNode2 = (PDeclarationFunction)nodeArrayList1.get(0);
        plistdeclarationfunctionNode3 = (PListDeclarationFunction)nodeArrayList2.get(0);

        plistdeclarationfunctionNode1 = new AListDeclarationFunctionListDeclarationFunction(pdeclarationfunctionNode2, plistdeclarationfunctionNode3);
        }
	nodeList.add(plistdeclarationfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AVideListDeclarationFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListDeclarationFunction plistdeclarationfunctionNode1;
        {
            // Block

        plistdeclarationfunctionNode1 = new AVideListDeclarationFunction();
        }
	nodeList.add(plistdeclarationfunctionNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 55}, {28, SHIFT, 1}, {29, SHIFT, 2}, {30, SHIFT, 3}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 3}, {0, SHIFT, 9}, },
			{{-1, ERROR, 4}, {31, ACCEPT, -1}, },
			{{-1, REDUCE, 53}, {7, SHIFT, 10}, },
			{{-1, ERROR, 6}, {30, SHIFT, 12}, },
			{{-1, REDUCE, 55}, {28, SHIFT, 1}, {29, SHIFT, 2}, {30, SHIFT, 3}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 9}, {1, SHIFT, 15}, {28, SHIFT, 1}, {29, SHIFT, 2}, },
			{{-1, ERROR, 10}, {28, SHIFT, 1}, {29, SHIFT, 2}, },
			{{-1, REDUCE, 55}, {28, SHIFT, 1}, {29, SHIFT, 2}, {30, SHIFT, 3}, },
			{{-1, REDUCE, 40}, {0, SHIFT, 20}, {4, SHIFT, 21}, },
			{{-1, ERROR, 13}, {30, SHIFT, 22}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 15}, {2, SHIFT, 23}, {28, SHIFT, 1}, {29, SHIFT, 2}, },
			{{-1, REDUCE, 53}, {7, SHIFT, 10}, },
			{{-1, ERROR, 17}, {30, SHIFT, 27}, },
			{{-1, REDUCE, 53}, {7, SHIFT, 10}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 20}, {1, SHIFT, 29}, {28, SHIFT, 1}, {29, SHIFT, 2}, },
			{{-1, ERROR, 21}, {27, SHIFT, 31}, },
			{{-1, ERROR, 22}, {0, SHIFT, 20}, },
			{{-1, REDUCE, 37}, {18, SHIFT, 32}, {21, SHIFT, 33}, {23, SHIFT, 34}, {24, SHIFT, 35}, {30, SHIFT, 36}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 53}, {7, SHIFT, 10}, },
			{{-1, ERROR, 26}, {1, SHIFT, 41}, },
			{{-1, REDUCE, 40}, {4, SHIFT, 21}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 29}, {2, SHIFT, 23}, {28, SHIFT, 1}, {29, SHIFT, 2}, },
			{{-1, REDUCE, 53}, {7, SHIFT, 10}, },
			{{-1, ERROR, 31}, {5, SHIFT, 45}, },
			{{-1, ERROR, 32}, {0, SHIFT, 46}, {16, SHIFT, 47}, {17, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {27, SHIFT, 51}, {30, SHIFT, 52}, },
			{{-1, ERROR, 33}, {0, SHIFT, 46}, {16, SHIFT, 47}, {17, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {27, SHIFT, 51}, {30, SHIFT, 52}, },
			{{-1, ERROR, 34}, {0, SHIFT, 46}, {16, SHIFT, 47}, {17, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {27, SHIFT, 51}, {30, SHIFT, 52}, },
			{{-1, ERROR, 35}, {0, SHIFT, 63}, },
			{{-1, REDUCE, 38}, {0, SHIFT, 64}, {4, SHIFT, 65}, },
			{{-1, REDUCE, 37}, {18, SHIFT, 32}, {21, SHIFT, 33}, {23, SHIFT, 34}, {24, SHIFT, 35}, {30, SHIFT, 36}, },
			{{-1, ERROR, 38}, {3, SHIFT, 67}, },
			{{-1, ERROR, 39}, {12, SHIFT, 68}, },
			{{-1, ERROR, 40}, {2, SHIFT, 23}, },
			{{-1, ERROR, 41}, {2, SHIFT, 23}, {28, SHIFT, 1}, {29, SHIFT, 2}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 53}, {7, SHIFT, 10}, },
			{{-1, ERROR, 44}, {1, SHIFT, 73}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 46}, {0, SHIFT, 46}, {16, SHIFT, 47}, {17, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {27, SHIFT, 51}, {30, SHIFT, 52}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 50}, {0, SHIFT, 46}, {16, SHIFT, 47}, {17, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {27, SHIFT, 51}, {30, SHIFT, 52}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 38}, {0, SHIFT, 76}, {4, SHIFT, 65}, },
			{{-1, ERROR, 53}, {14, SHIFT, 77}, {19, SHIFT, 78}, },
			{{-1, REDUCE, 3}, {15, SHIFT, 79}, },
			{{-1, REDUCE, 5}, {12, SHIFT, 80}, {13, SHIFT, 81}, },
			{{-1, REDUCE, 8}, {8, SHIFT, 82}, {9, SHIFT, 83}, },
			{{-1, REDUCE, 11}, {10, SHIFT, 84}, {11, SHIFT, 85}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 61}, {14, SHIFT, 77}, {22, SHIFT, 86}, },
			{{-1, ERROR, 62}, {6, SHIFT, 87}, {14, SHIFT, 77}, },
			{{-1, ERROR, 63}, {0, SHIFT, 46}, {16, SHIFT, 47}, {17, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {27, SHIFT, 51}, {30, SHIFT, 52}, },
			{{-1, REDUCE, 25}, {0, SHIFT, 46}, {16, SHIFT, 47}, {17, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {27, SHIFT, 51}, {30, SHIFT, 52}, },
			{{-1, ERROR, 65}, {0, SHIFT, 46}, {16, SHIFT, 47}, {17, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {27, SHIFT, 51}, {30, SHIFT, 52}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 68}, {0, SHIFT, 46}, {16, SHIFT, 47}, {17, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {27, SHIFT, 51}, {30, SHIFT, 52}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 53}, {7, SHIFT, 10}, },
			{{-1, ERROR, 72}, {2, SHIFT, 23}, },
			{{-1, ERROR, 73}, {2, SHIFT, 23}, {28, SHIFT, 1}, {29, SHIFT, 2}, },
			{{-1, ERROR, 74}, {1, SHIFT, 97}, {14, SHIFT, 77}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 25}, {0, SHIFT, 46}, {16, SHIFT, 47}, {17, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {27, SHIFT, 51}, {30, SHIFT, 52}, },
			{{-1, ERROR, 77}, {0, SHIFT, 46}, {16, SHIFT, 47}, {17, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {27, SHIFT, 51}, {30, SHIFT, 52}, },
			{{-1, ERROR, 78}, {2, SHIFT, 23}, },
			{{-1, ERROR, 79}, {0, SHIFT, 46}, {16, SHIFT, 47}, {17, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {27, SHIFT, 51}, {30, SHIFT, 52}, },
			{{-1, ERROR, 80}, {0, SHIFT, 46}, {16, SHIFT, 47}, {17, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {27, SHIFT, 51}, {30, SHIFT, 52}, },
			{{-1, ERROR, 81}, {0, SHIFT, 46}, {16, SHIFT, 47}, {17, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {27, SHIFT, 51}, {30, SHIFT, 52}, },
			{{-1, ERROR, 82}, {0, SHIFT, 46}, {16, SHIFT, 47}, {17, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {27, SHIFT, 51}, {30, SHIFT, 52}, },
			{{-1, ERROR, 83}, {0, SHIFT, 46}, {16, SHIFT, 47}, {17, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {27, SHIFT, 51}, {30, SHIFT, 52}, },
			{{-1, ERROR, 84}, {0, SHIFT, 46}, {16, SHIFT, 47}, {17, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {27, SHIFT, 51}, {30, SHIFT, 52}, },
			{{-1, ERROR, 85}, {0, SHIFT, 46}, {16, SHIFT, 47}, {17, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {27, SHIFT, 51}, {30, SHIFT, 52}, },
			{{-1, ERROR, 86}, {2, SHIFT, 23}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 88}, {1, SHIFT, 109}, {14, SHIFT, 77}, },
			{{-1, REDUCE, 27}, {7, SHIFT, 110}, {14, SHIFT, 77}, },
			{{-1, ERROR, 90}, {1, SHIFT, 112}, },
			{{-1, ERROR, 91}, {5, SHIFT, 113}, {14, SHIFT, 77}, },
			{{-1, ERROR, 92}, {6, SHIFT, 114}, {14, SHIFT, 77}, },
			{{-1, ERROR, 93}, {2, SHIFT, 23}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 53}, {7, SHIFT, 10}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 98}, {1, SHIFT, 117}, },
			{{-1, REDUCE, 2}, {15, SHIFT, 79}, },
			{{-1, REDUCE, 30}, {20, SHIFT, 118}, },
			{{-1, REDUCE, 4}, {12, SHIFT, 80}, {13, SHIFT, 81}, },
			{{-1, REDUCE, 6}, {8, SHIFT, 82}, {9, SHIFT, 83}, },
			{{-1, REDUCE, 7}, {8, SHIFT, 82}, {9, SHIFT, 83}, },
			{{-1, REDUCE, 9}, {10, SHIFT, 84}, {11, SHIFT, 85}, },
			{{-1, REDUCE, 10}, {10, SHIFT, 84}, {11, SHIFT, 85}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 109}, {6, SHIFT, 119}, },
			{{-1, ERROR, 110}, {0, SHIFT, 46}, {16, SHIFT, 47}, {17, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {27, SHIFT, 51}, {30, SHIFT, 52}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 112}, {6, SHIFT, 121}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 116}, {2, SHIFT, 23}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 118}, {2, SHIFT, 23}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 27}, {7, SHIFT, 110}, {14, SHIFT, 77}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 26}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 4}, },
			{{-1, 89}, {32, 53}, {33, 61}, {34, 62}, {46, 74}, {63, 88}, {65, 91}, {68, 92}, {110, 120}, },
			{{-1, 54}, {77, 99}, },
			{{-1, 55}, {79, 101}, },
			{{-1, 56}, {80, 102}, {81, 103}, },
			{{-1, 57}, {82, 104}, {83, 105}, },
			{{-1, 58}, {50, 75}, {84, 106}, {85, 107}, },
			{{-1, 59}, },
			{{-1, 90}, {76, 98}, },
			{{-1, 111}, {120, 124}, },
			{{-1, 37}, },
			{{-1, 24}, {29, 42}, {40, 69}, {41, 70}, {72, 94}, {73, 95}, {78, 100}, {86, 108}, {93, 115}, {116, 122}, {118, 123}, },
			{{-1, 38}, {37, 66}, },
			{{-1, 60}, {23, 39}, {37, 39}, },
			{{-1, 5}, {9, 16}, {10, 18}, {15, 25}, {20, 30}, {29, 43}, {41, 71}, {73, 96}, },
			{{-1, 17}, {0, 6}, {7, 13}, {11, 13}, },
			{{-1, 7}, },
			{{-1, 11}, {16, 26}, {18, 28}, {25, 40}, {30, 44}, {43, 72}, {71, 93}, {96, 116}, },
			{{-1, 8}, {7, 14}, {11, 19}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'entier', 'bool', identifiant, EOF",
			"expecting: identifiant",
			"expecting: '('",
			"expecting: EOF",
			"expecting: ',', 'entier', 'bool', identifiant, EOF",
			"expecting: ')', 'entier', 'bool'",
			"expecting: 'entier', 'bool'",
			"expecting: '(', '[', ',', 'entier', 'bool', identifiant, EOF",
			"expecting: '{', 'entier', 'bool'",
			"expecting: ')', ','",
			"expecting: ')', '{', ',', 'entier', 'bool', identifiant, EOF",
			"expecting: nombre",
			"expecting: '}', 'si', 'tantque', 'retour', 'ecrire', identifiant",
			"expecting: '{', ','",
			"expecting: ')'",
			"expecting: ')', '{', '[', ',', 'entier', 'bool', identifiant, EOF",
			"expecting: ')', '{', 'entier', 'bool', identifiant, EOF",
			"expecting: ']'",
			"expecting: '(', 'vrai', 'faux', 'lire()', '!', nombre, identifiant",
			"expecting: '(', '[', '='",
			"expecting: '}'",
			"expecting: '='",
			"expecting: '{'",
			"expecting: ')', ']', ';', ',', '+', '-', '*', '/', '=', '<', '|', '&', 'alors', 'faire'",
			"expecting: '(', ')', '[', ']', ';', ',', '+', '-', '*', '/', '=', '<', '|', '&', 'alors', 'faire'",
			"expecting: '|', 'alors'",
			"expecting: ')', ']', ';', ',', '|', '&', 'alors', 'faire'",
			"expecting: ')', ']', ';', ',', '=', '<', '|', '&', 'alors', 'faire'",
			"expecting: ')', ']', ';', ',', '+', '-', '=', '<', '|', '&', 'alors', 'faire'",
			"expecting: '|', 'faire'",
			"expecting: ';', '|'",
			"expecting: '(', ')', 'vrai', 'faux', 'lire()', '!', nombre, identifiant",
			"expecting: '}', 'si', 'sinon', 'tantque', 'retour', 'ecrire', 'entier', 'bool', identifiant, EOF",
			"expecting: ')', '|'",
			"expecting: ')', ',', '|'",
			"expecting: ']', '|'",
			"expecting: '}', 'si', 'sinon', 'tantque', 'retour', 'ecrire', identifiant",
			"expecting: ';'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 1, 2, 3, 4, 1, 0, 3, 5, 6, 0, 7, 1, 3, 8, 9, 1, 10, 3, 5, 11, 2, 12, 0, 13, 14, 15, 16, 8, 9, 17, 18, 18, 18, 2, 19, 12, 20, 21, 22, 8, 0, 13, 14, 10, 18, 23, 23, 23, 18, 23, 24, 25, 26, 27, 28, 23, 23, 23, 23, 29, 30, 18, 31, 18, 20, 32, 18, 0, 0, 13, 22, 8, 33, 23, 31, 18, 22, 18, 18, 18, 18, 18, 18, 18, 22, 12, 33, 34, 14, 35, 30, 22, 0, 0, 13, 23, 14, 26, 36, 27, 28, 28, 23, 23, 23, 23, 12, 37, 18, 14, 37, 23, 12, 0, 22, 23, 22, 12, 34, 12, 0, 12, 14, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
