Package lParser;

Helpers

lettre = [['a' .. 'z'] + ['A' .. 'Z']];
chiffre = ['0' .. '9'];
alpha = [lettre + ['_' + '$']];
alphanum = [lettre + chiffre];

Tokens

espaces = (' ' | 13 | 10)+;
commentaire= '#' [[0 .. 0xffff] - [10 + 13]]* (10 | 13 | 10 13);

l_par ='(';
r_par = ')';
l_brace = '{';
r_brace = '}';
l_bracket = '[';
r_bracket = ']';
p_virgule = ';';
virgule = ',';

plus = '+';
moins = '-';
mult = '*';
div = '/';
equ = '=';
inf = '<';
ou = '|';
et = '&';
vrai = 'vrai';
faux = 'faux';

si = 'si';
alors = 'alors';
sinon = 'sinon';
tantque = 'tantque';
faire = 'faire';
retour = 'retour';
ecrire = 'ecrire';
lire = 'lire()';
non = '!';
nombre = chiffre+;
entier = 'entier';
bool = 'bool';
identifiant = alpha alphanum*;

Ignored Tokens

espaces, commentaire;

Productions
programme =
       {programme} list_declaration_variable list_declaration_function;

expression =
       {ou} expression ou expression2 |
       {p2} expression2;

expression2 =
       {et} expression2 et expression3 |
       {p3} expression3;

expression3 =
       {equ} expression3 equ expression4 |
       {inf} expression3 inf expression4 |
       {p4} expression4;

expression4 =
       {plus} expression4 plus expression5 |
       {moins} expression4 moins expression5 |
       {p5} expression5;

expression5 =
       {mult} expression5 mult expression6 |
       {div} expression5 div expression6 |
       {p6} expression6;

expression6 =
       {non} non expression6 |
       {p7} expression7;

expression7 =
       {parentese} l_par expression r_par |
       {nombre} nombre |
       {vrai} vrai |
       {faux} faux |
       {var} var |
       {af} identifiant l_par liste_expressions r_par |
       {lire} lire;

liste_expressions =
       {liste_ex} expression liste_expressions_next |
       {vide} ;

liste_expressions_next =
       {virgule} virgule expression liste_expressions_next |
       {vide} ;

instruction =
       {affect} var equ expression p_virgule |
       {tantque} tantque expression faire bloc_instructions |
       {si} si expression alors bloc_instructions |
       {sinon} si expression alors [bloc_si]:bloc_instructions sinon [bloc_sinon]:bloc_instructions |
       {appel_fon} identifiant l_par liste_expressions r_par p_virgule |
       {ecrire} ecrire l_par expression r_par p_virgule |
       {result_fonc} retour expression p_virgule ;

bloc_instructions =
       {bloc_int} l_brace liste_instructions r_brace ;

liste_instructions =
       {liste_int} instruction liste_instructions |
       {vide} ;



var =
       {simple} identifiant |
       {tableau} identifiant l_bracket expression r_bracket ;

declar_var =
       {dec_simple} type identifiant |
       {dec_tableau} type identifiant l_bracket nombre r_bracket ;

type =
       {bool} bool |
       {entier} entier ;

declaration_function =
       {declaration_function} type_option identifiant l_par [parametre]:list_declaration_variable r_par [variable_interne]:list_declaration_variable bloc_instructions;

type_option =
       {type} type |
       {vide} ;

list_declaration_variable =
       {variable} declar_var list_declaration_variable_next |
       {vide} ;

list_declaration_variable_next =
       {virgule_var} virgule declar_var list_declaration_variable_next |
       {vide} ;

list_declaration_function =
       {list_declaration_function} declaration_function list_declaration_function |
       {vide} ;