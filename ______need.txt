Helpers
    digit = ['0'..'9'];
    letter = ['a'..'z'] | ['A'..'Z'];
    number = digit+;
    identifier = letter (letter | digit)*;

Tokens
    PLUS = '+';
    MINUS = '-';
    MULTIPLY = '*';
    DIVIDE = '/';
    LESS_THAN = '<';
    EQUALS = '=';
    AND = '&';
    OR = '|';
    NOT = '!';
    LEFT_BRACKET = '[';
    RIGHT_BRACKET = ']';
    LEFT_BRACE = '{';
    RIGHT_BRACE = '}';
    SEMICOLON = ';';
    IF = 'si';
    THEN = 'alors';
    ELSE = 'sinon';
    WHILE = 'tantque';
    DO = 'faire';
    RETURN = 'retour';
    FUNCTION = 'fonction';
    MAIN = 'main';
    READ = 'lire';
    WRITE = 'ecrire';
    INTEGER_TYPE = 'entier';
    BOOL_TYPE = 'bool';

Productions
    program = function*;

    function = FUNCTION identifier LEFT_BRACKET parameters RIGHT_BRACKET return_type LEFT_BRACE statements RIGHT_BRACE;

    parameters = (parameter (COMMA parameter)*)?;

    parameter = type identifier;

    return_type = type | VOID;

    type = INTEGER_TYPE | BOOL_TYPE | array_type;

    array_type = type LEFT_BRACKET RIGHT_BRACKET;

    statements = statement*;

    statement = block
              | assignment
              | if_statement
              | while_statement
              | return_statement
              | function_call SEMICOLON;

    block = LEFT_BRACE statements RIGHT_BRACE;

    assignment = identifier ASSIGN expression SEMICOLON;

    if_statement = IF expression THEN statement (ELSE statement)?;

    while_statement = WHILE expression DO statement;

    return_statement = RETURN expression SEMICOLON;

    function_call = identifier LEFT_BRACKET arguments RIGHT_BRACKET;

    arguments = (expression (COMMA expression)*)?;

    expression = simple_expression (comparison_operator simple_expression)?;

    simple_expression = term ((addition_operator | subtraction_operator) term)*;

    term = factor ((multiplication_operator | division_operator) factor)*;

    factor = identifier
           | number
           | LEFT_BRACKET expression RIGHT_BRACKET
           | function_call
           | boolean_literal
           | NOT factor;

    boolean_literal = TRUE | FALSE;

    comparison_operator = LESS_THAN | EQUALS;

    addition_operator = PLUS | MINUS;

    subtraction_operator = MINUS;

    multiplication_operator = MULTIPLY;

    division_operator = DIVIDE;

Tokens
    TRUE = 'vrai';
    FALSE = 'faux';
    VOID = 'rien';
    ASSIGN = '=';
    COMMA = ',';