/* This file was generated by SableCC (http://www.sablecc.org/). */

package parser;

import lexer.*;
import node.*;
import analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAprogram1Program */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAprogram2Program */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce AFunction */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AParameter */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce AParameterCommaParameter */
            {
                ArrayList<Object> list = new4();
                push(goTo(3), list, false);
            }
            break;
            case 5: /* reduce ANothingCommaParameter */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list, false);
            }
            break;
            case 6: /* reduce AAparameterparameters1Parameters */
            {
                ArrayList<Object> list = new6();
                push(goTo(4), list, false);
            }
            break;
            case 7: /* reduce AAparameterparameters2Parameters */
            {
                ArrayList<Object> list = new7();
                push(goTo(4), list, false);
            }
            break;
            case 8: /* reduce ANothingParameters */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list, false);
            }
            break;
            case 9: /* reduce APrimaryTypeType */
            {
                ArrayList<Object> list = new9();
                push(goTo(5), list, false);
            }
            break;
            case 10: /* reduce ATableauType */
            {
                ArrayList<Object> list = new10();
                push(goTo(5), list, false);
            }
            break;
            case 11: /* reduce ARienType */
            {
                ArrayList<Object> list = new11();
                push(goTo(5), list, false);
            }
            break;
            case 12: /* reduce AIntPrimaryType */
            {
                ArrayList<Object> list = new12();
                push(goTo(6), list, false);
            }
            break;
            case 13: /* reduce ABooleanPrimaryType */
            {
                ArrayList<Object> list = new13();
                push(goTo(6), list, false);
            }
            break;
            case 14: /* reduce AArray */
            {
                ArrayList<Object> list = new14();
                push(goTo(7), list, false);
            }
            break;
            case 15: /* reduce ANoVarBegin */
            {
                ArrayList<Object> list = new15();
                push(goTo(8), list, false);
            }
            break;
            case 16: /* reduce AAwithvarbegin1Begin */
            {
                ArrayList<Object> list = new16();
                push(goTo(8), list, false);
            }
            break;
            case 17: /* reduce AAwithvarbegin2Begin */
            {
                ArrayList<Object> list = new17();
                push(goTo(8), list, false);
            }
            break;
            case 18: /* reduce AAstatements1Statements */
            {
                ArrayList<Object> list = new18();
                push(goTo(9), list, false);
            }
            break;
            case 19: /* reduce AAstatements2Statements */
            {
                ArrayList<Object> list = new19();
                push(goTo(9), list, false);
            }
            break;
            case 20: /* reduce AAssignmentStatement */
            {
                ArrayList<Object> list = new20();
                push(goTo(10), list, false);
            }
            break;
            case 21: /* reduce AIfStatementStatement */
            {
                ArrayList<Object> list = new21();
                push(goTo(10), list, false);
            }
            break;
            case 22: /* reduce AWhileStatementStatement */
            {
                ArrayList<Object> list = new22();
                push(goTo(10), list, false);
            }
            break;
            case 23: /* reduce AReturnStatementStatement */
            {
                ArrayList<Object> list = new23();
                push(goTo(10), list, false);
            }
            break;
            case 24: /* reduce AFunctionCallStatement */
            {
                ArrayList<Object> list = new24();
                push(goTo(10), list, false);
            }
            break;
            case 25: /* reduce ABlock */
            {
                ArrayList<Object> list = new25();
                push(goTo(11), list, false);
            }
            break;
            case 26: /* reduce AAssignment */
            {
                ArrayList<Object> list = new26();
                push(goTo(12), list, false);
            }
            break;
            case 27: /* reduce AIdentifierFirstNameOrInt */
            {
                ArrayList<Object> list = new27();
                push(goTo(13), list, false);
            }
            break;
            case 28: /* reduce AIntFirstNameOrInt */
            {
                ArrayList<Object> list = new28();
                push(goTo(13), list, false);
            }
            break;
            case 29: /* reduce AIdentifierSecondNameOrInt */
            {
                ArrayList<Object> list = new29();
                push(goTo(14), list, false);
            }
            break;
            case 30: /* reduce AIntSecondNameOrInt */
            {
                ArrayList<Object> list = new30();
                push(goTo(14), list, false);
            }
            break;
            case 31: /* reduce APlusCalc */
            {
                ArrayList<Object> list = new31();
                push(goTo(15), list, false);
            }
            break;
            case 32: /* reduce AMinusCalc */
            {
                ArrayList<Object> list = new32();
                push(goTo(15), list, false);
            }
            break;
            case 33: /* reduce AMultCalc */
            {
                ArrayList<Object> list = new33();
                push(goTo(15), list, false);
            }
            break;
            case 34: /* reduce ADivCalc */
            {
                ArrayList<Object> list = new34();
                push(goTo(15), list, false);
            }
            break;
            case 35: /* reduce AIfStatement */
            {
                ArrayList<Object> list = new35();
                push(goTo(16), list, false);
            }
            break;
            case 36: /* reduce AAelseblockmaybe1ElseBlockMaybe */
            {
                ArrayList<Object> list = new36();
                push(goTo(17), list, false);
            }
            break;
            case 37: /* reduce AAelseblockmaybe2ElseBlockMaybe */
            {
                ArrayList<Object> list = new37();
                push(goTo(17), list, false);
            }
            break;
            case 38: /* reduce AElseBlock */
            {
                ArrayList<Object> list = new38();
                push(goTo(18), list, false);
            }
            break;
            case 39: /* reduce AWhileStatement */
            {
                ArrayList<Object> list = new39();
                push(goTo(19), list, false);
            }
            break;
            case 40: /* reduce AReturnStatement */
            {
                ArrayList<Object> list = new40();
                push(goTo(20), list, false);
            }
            break;
            case 41: /* reduce AFunctionCall */
            {
                ArrayList<Object> list = new41();
                push(goTo(21), list, false);
            }
            break;
            case 42: /* reduce AAarguments1Arguments */
            {
                ArrayList<Object> list = new42();
                push(goTo(22), list, false);
            }
            break;
            case 43: /* reduce AAarguments2Arguments */
            {
                ArrayList<Object> list = new43();
                push(goTo(22), list, false);
            }
            break;
            case 44: /* reduce AAargumentsexpression1ArgumentsExpression */
            {
                ArrayList<Object> list = new44();
                push(goTo(23), list, false);
            }
            break;
            case 45: /* reduce AAargumentsexpression2ArgumentsExpression */
            {
                ArrayList<Object> list = new45();
                push(goTo(23), list, false);
            }
            break;
            case 46: /* reduce AAargumentscomma1ArgumentsComma */
            {
                ArrayList<Object> list = new46();
                push(goTo(24), list, false);
            }
            break;
            case 47: /* reduce AAargumentscomma2ArgumentsComma */
            {
                ArrayList<Object> list = new47();
                push(goTo(24), list, false);
            }
            break;
            case 48: /* reduce AAexpression1Expression */
            {
                ArrayList<Object> list = new48();
                push(goTo(25), list, false);
            }
            break;
            case 49: /* reduce AAexpression2Expression */
            {
                ArrayList<Object> list = new49();
                push(goTo(25), list, false);
            }
            break;
            case 50: /* reduce AEquCompExpr */
            {
                ArrayList<Object> list = new50();
                push(goTo(26), list, false);
            }
            break;
            case 51: /* reduce AInfCompExpr */
            {
                ArrayList<Object> list = new51();
                push(goTo(26), list, false);
            }
            break;
            case 52: /* reduce AAsimpleexpression1SimpleExpression */
            {
                ArrayList<Object> list = new52();
                push(goTo(27), list, false);
            }
            break;
            case 53: /* reduce AAsimpleexpression2SimpleExpression */
            {
                ArrayList<Object> list = new53();
                push(goTo(27), list, false);
            }
            break;
            case 54: /* reduce APlusAddTerm */
            {
                ArrayList<Object> list = new54();
                push(goTo(28), list, false);
            }
            break;
            case 55: /* reduce AMinusAddTerm */
            {
                ArrayList<Object> list = new55();
                push(goTo(28), list, false);
            }
            break;
            case 56: /* reduce AAterm1Term */
            {
                ArrayList<Object> list = new56();
                push(goTo(29), list, false);
            }
            break;
            case 57: /* reduce AAterm2Term */
            {
                ArrayList<Object> list = new57();
                push(goTo(29), list, false);
            }
            break;
            case 58: /* reduce AMultMultTerm */
            {
                ArrayList<Object> list = new58();
                push(goTo(30), list, false);
            }
            break;
            case 59: /* reduce ADivMultTerm */
            {
                ArrayList<Object> list = new59();
                push(goTo(30), list, false);
            }
            break;
            case 60: /* reduce AIdentifierFactor */
            {
                ArrayList<Object> list = new60();
                push(goTo(31), list, false);
            }
            break;
            case 61: /* reduce AIntegerFactor */
            {
                ArrayList<Object> list = new61();
                push(goTo(31), list, false);
            }
            break;
            case 62: /* reduce AFunctionCallFactor */
            {
                ArrayList<Object> list = new62();
                push(goTo(31), list, false);
            }
            break;
            case 63: /* reduce ABooleanFactor */
            {
                ArrayList<Object> list = new63();
                push(goTo(31), list, false);
            }
            break;
            case 64: /* reduce ANotFactorFactor */
            {
                ArrayList<Object> list = new64();
                push(goTo(31), list, false);
            }
            break;
            case 65: /* reduce AInfComparator */
            {
                ArrayList<Object> list = new65();
                push(goTo(32), list, false);
            }
            break;
            case 66: /* reduce ATerminal$Function */
            {
                ArrayList<Object> list = new66();
                push(goTo(33), list, true);
            }
            break;
            case 67: /* reduce ANonTerminal$Function */
            {
                ArrayList<Object> list = new67();
                push(goTo(33), list, true);
            }
            break;
            case 68: /* reduce ATerminal$CommaParameter */
            {
                ArrayList<Object> list = new68();
                push(goTo(34), list, true);
            }
            break;
            case 69: /* reduce ANonTerminal$CommaParameter */
            {
                ArrayList<Object> list = new69();
                push(goTo(34), list, true);
            }
            break;
            case 70: /* reduce ATerminal$Parameter */
            {
                ArrayList<Object> list = new70();
                push(goTo(35), list, true);
            }
            break;
            case 71: /* reduce ANonTerminal$Parameter */
            {
                ArrayList<Object> list = new71();
                push(goTo(35), list, true);
            }
            break;
            case 72: /* reduce ATerminal$Statement */
            {
                ArrayList<Object> list = new72();
                push(goTo(36), list, true);
            }
            break;
            case 73: /* reduce ANonTerminal$Statement */
            {
                ArrayList<Object> list = new73();
                push(goTo(36), list, true);
            }
            break;
            case 74: /* reduce ATerminal$ArgumentsComma */
            {
                ArrayList<Object> list = new74();
                push(goTo(37), list, true);
            }
            break;
            case 75: /* reduce ANonTerminal$ArgumentsComma */
            {
                ArrayList<Object> list = new75();
                push(goTo(37), list, true);
            }
            break;
            case 76: /* reduce ATerminal$AddTerm */
            {
                ArrayList<Object> list = new76();
                push(goTo(38), list, true);
            }
            break;
            case 77: /* reduce ANonTerminal$AddTerm */
            {
                ArrayList<Object> list = new77();
                push(goTo(38), list, true);
            }
            break;
            case 78: /* reduce ATerminal$MultTerm */
            {
                ArrayList<Object> list = new78();
                push(goTo(39), list, true);
            }
            break;
            case 79: /* reduce ANonTerminal$MultTerm */
            {
                ArrayList<Object> list = new79();
                push(goTo(39), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAprogram1Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        }

        pprogramNode1 = new AProgram(listNode2);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAprogram2Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pprogramNode1 = new AProgram(listNode3);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentifier tidentifierNode3;
        TLPar tlparNode4;
        PParameters pparametersNode5;
        TRPar trparNode6;
        PBegin pbeginNode7;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pparametersNode5 = (PParameters)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        pbeginNode7 = (PBegin)nodeArrayList6.get(0);

        pfunctionNode1 = new AFunction(ptypeNode2, tidentifierNode3, tlparNode4, pparametersNode5, trparNode6, pbeginNode7);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AParameter */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParameter pparameterNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentifier tidentifierNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        pparameterNode1 = new AParameter(ptypeNode2, tidentifierNode3);
        }
	nodeList.add(pparameterNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AParameterCommaParameter */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommaParameter pcommaparameterNode1;
        {
            // Block
        TComma tcommaNode2;
        PParameter pparameterNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pparameterNode3 = (PParameter)nodeArrayList2.get(0);

        pcommaparameterNode1 = new AParameterCommaParameter(tcommaNode2, pparameterNode3);
        }
	nodeList.add(pcommaparameterNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ANothingCommaParameter */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommaParameter pcommaparameterNode1;
        {
            // Block
        TBlank tblankNode2;
        tblankNode2 = (TBlank)nodeArrayList1.get(0);

        pcommaparameterNode1 = new ANothingCommaParameter(tblankNode2);
        }
	nodeList.add(pcommaparameterNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAparameterparameters1Parameters */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParameters pparametersNode1;
        {
            // Block
        PParameter pparameterNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pparameterNode2 = (PParameter)nodeArrayList1.get(0);
        {
            // Block
        }

        pparametersNode1 = new AParameterParameters(pparameterNode2, listNode3);
        }
	nodeList.add(pparametersNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAparameterparameters2Parameters */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParameters pparametersNode1;
        {
            // Block
        PParameter pparameterNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pparameterNode2 = (PParameter)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pparametersNode1 = new AParameterParameters(pparameterNode2, listNode4);
        }
	nodeList.add(pparametersNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ANothingParameters */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParameters pparametersNode1;
        {
            // Block
        TBlank tblankNode2;
        tblankNode2 = (TBlank)nodeArrayList1.get(0);

        pparametersNode1 = new ANothingParameters(tblankNode2);
        }
	nodeList.add(pparametersNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce APrimaryTypeType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PPrimaryType pprimarytypeNode2;
        pprimarytypeNode2 = (PPrimaryType)nodeArrayList1.get(0);

        ptypeNode1 = new APrimaryTypeType(pprimarytypeNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ATableauType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PArray parrayNode2;
        parrayNode2 = (PArray)nodeArrayList1.get(0);

        ptypeNode1 = new ATableauType(parrayNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ARienType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TVoid tvoidNode2;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);

        ptypeNode1 = new ARienType(tvoidNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AIntPrimaryType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrimaryType pprimarytypeNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        pprimarytypeNode1 = new AIntPrimaryType(tintNode2);
        }
	nodeList.add(pprimarytypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ABooleanPrimaryType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrimaryType pprimarytypeNode1;
        {
            // Block
        TBoolean tbooleanNode2;
        tbooleanNode2 = (TBoolean)nodeArrayList1.get(0);

        pprimarytypeNode1 = new ABooleanPrimaryType(tbooleanNode2);
        }
	nodeList.add(pprimarytypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AArray */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArray parrayNode1;
        {
            // Block
        PPrimaryType pprimarytypeNode2;
        TLBracket tlbracketNode3;
        TRBracket trbracketNode4;
        pprimarytypeNode2 = (PPrimaryType)nodeArrayList1.get(0);
        tlbracketNode3 = (TLBracket)nodeArrayList2.get(0);
        trbracketNode4 = (TRBracket)nodeArrayList3.get(0);

        parrayNode1 = new AArray(pprimarytypeNode2, tlbracketNode3, trbracketNode4);
        }
	nodeList.add(parrayNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ANoVarBegin */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBegin pbeginNode1;
        {
            // Block
        TLBrace tlbraceNode2;
        PStatements pstatementsNode3;
        tlbraceNode2 = (TLBrace)nodeArrayList1.get(0);
        pstatementsNode3 = (PStatements)nodeArrayList2.get(0);

        pbeginNode1 = new ANoVarBegin(tlbraceNode2, pstatementsNode3);
        }
	nodeList.add(pbeginNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AAwithvarbegin1Begin */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBegin pbeginNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        TLBrace tlbraceNode3;
        PStatements pstatementsNode4;
        TRBrace trbraceNode5;
        {
            // Block
        }
        tlbraceNode3 = (TLBrace)nodeArrayList1.get(0);
        pstatementsNode4 = (PStatements)nodeArrayList2.get(0);
        trbraceNode5 = (TRBrace)nodeArrayList3.get(0);

        pbeginNode1 = new AWithVarBegin(listNode2, tlbraceNode3, pstatementsNode4, trbraceNode5);
        }
	nodeList.add(pbeginNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAwithvarbegin2Begin */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBegin pbeginNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TLBrace tlbraceNode4;
        PStatements pstatementsNode5;
        TRBrace trbraceNode6;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tlbraceNode4 = (TLBrace)nodeArrayList2.get(0);
        pstatementsNode5 = (PStatements)nodeArrayList3.get(0);
        trbraceNode6 = (TRBrace)nodeArrayList4.get(0);

        pbeginNode1 = new AWithVarBegin(listNode3, tlbraceNode4, pstatementsNode5, trbraceNode6);
        }
	nodeList.add(pbeginNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAstatements1Statements */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PStatements pstatementsNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        }

        pstatementsNode1 = new AStatements(listNode2);
        }
	nodeList.add(pstatementsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAstatements2Statements */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatements pstatementsNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pstatementsNode1 = new AStatements(listNode3);
        }
	nodeList.add(pstatementsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAssignmentStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PAssignment passignmentNode2;
        passignmentNode2 = (PAssignment)nodeArrayList1.get(0);

        pstatementNode1 = new AAssignmentStatement(passignmentNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AIfStatementStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PIfStatement pifstatementNode2;
        pifstatementNode2 = (PIfStatement)nodeArrayList1.get(0);

        pstatementNode1 = new AIfStatementStatement(pifstatementNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AWhileStatementStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PWhileStatement pwhilestatementNode2;
        pwhilestatementNode2 = (PWhileStatement)nodeArrayList1.get(0);

        pstatementNode1 = new AWhileStatementStatement(pwhilestatementNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AReturnStatementStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PReturnStatement preturnstatementNode2;
        preturnstatementNode2 = (PReturnStatement)nodeArrayList1.get(0);

        pstatementNode1 = new AReturnStatementStatement(preturnstatementNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AFunctionCallStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PFunctionCall pfunctioncallNode2;
        pfunctioncallNode2 = (PFunctionCall)nodeArrayList1.get(0);

        pstatementNode1 = new AFunctionCallStatement(pfunctioncallNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ABlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TLBrace tlbraceNode2;
        PStatement pstatementNode3;
        TRBrace trbraceNode4;
        tlbraceNode2 = (TLBrace)nodeArrayList1.get(0);
        pstatementNode3 = (PStatement)nodeArrayList2.get(0);
        trbraceNode4 = (TRBrace)nodeArrayList3.get(0);

        pblockNode1 = new ABlock(tlbraceNode2, pstatementNode3, trbraceNode4);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AAssignment */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssignment passignmentNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TEqu tequNode3;
        PFirstNameOrInt pfirstnameorintNode4;
        PCalc pcalcNode5;
        PSecondNameOrInt psecondnameorintNode6;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tequNode3 = (TEqu)nodeArrayList2.get(0);
        pfirstnameorintNode4 = (PFirstNameOrInt)nodeArrayList3.get(0);
        pcalcNode5 = (PCalc)nodeArrayList4.get(0);
        psecondnameorintNode6 = (PSecondNameOrInt)nodeArrayList5.get(0);

        passignmentNode1 = new AAssignment(tidentifierNode2, tequNode3, pfirstnameorintNode4, pcalcNode5, psecondnameorintNode6);
        }
	nodeList.add(passignmentNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AIdentifierFirstNameOrInt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFirstNameOrInt pfirstnameorintNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pfirstnameorintNode1 = new AIdentifierFirstNameOrInt(tidentifierNode2);
        }
	nodeList.add(pfirstnameorintNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AIntFirstNameOrInt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFirstNameOrInt pfirstnameorintNode1;
        {
            // Block
        TInteger tintegerNode2;
        tintegerNode2 = (TInteger)nodeArrayList1.get(0);

        pfirstnameorintNode1 = new AIntFirstNameOrInt(tintegerNode2);
        }
	nodeList.add(pfirstnameorintNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AIdentifierSecondNameOrInt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSecondNameOrInt psecondnameorintNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        psecondnameorintNode1 = new AIdentifierSecondNameOrInt(tidentifierNode2);
        }
	nodeList.add(psecondnameorintNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AIntSecondNameOrInt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSecondNameOrInt psecondnameorintNode1;
        {
            // Block
        TInteger tintegerNode2;
        tintegerNode2 = (TInteger)nodeArrayList1.get(0);

        psecondnameorintNode1 = new AIntSecondNameOrInt(tintegerNode2);
        }
	nodeList.add(psecondnameorintNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce APlusCalc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCalc pcalcNode1;
        {
            // Block
        TPlus tplusNode2;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);

        pcalcNode1 = new APlusCalc(tplusNode2);
        }
	nodeList.add(pcalcNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AMinusCalc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCalc pcalcNode1;
        {
            // Block
        TMinus tminusNode2;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);

        pcalcNode1 = new AMinusCalc(tminusNode2);
        }
	nodeList.add(pcalcNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AMultCalc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCalc pcalcNode1;
        {
            // Block
        TMult tmultNode2;
        tmultNode2 = (TMult)nodeArrayList1.get(0);

        pcalcNode1 = new AMultCalc(tmultNode2);
        }
	nodeList.add(pcalcNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ADivCalc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCalc pcalcNode1;
        {
            // Block
        TDiv tdivNode2;
        tdivNode2 = (TDiv)nodeArrayList1.get(0);

        pcalcNode1 = new ADivCalc(tdivNode2);
        }
	nodeList.add(pcalcNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AIfStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfStatement pifstatementNode1;
        {
            // Block
        TIf tifNode2;
        PExpression pexpressionNode3;
        TThen tthenNode4;
        PBlock pblockNode5;
        PElseBlockMaybe pelseblockmaybeNode6;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        pblockNode5 = (PBlock)nodeArrayList4.get(0);
        pelseblockmaybeNode6 = (PElseBlockMaybe)nodeArrayList5.get(0);

        pifstatementNode1 = new AIfStatement(tifNode2, pexpressionNode3, tthenNode4, pblockNode5, pelseblockmaybeNode6);
        }
	nodeList.add(pifstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AAelseblockmaybe1ElseBlockMaybe */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PElseBlockMaybe pelseblockmaybeNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;

        pelseblockmaybeNode1 = new AElseBlockMaybe(null);
        }
	nodeList.add(pelseblockmaybeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AAelseblockmaybe2ElseBlockMaybe */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseBlockMaybe pelseblockmaybeNode1;
        {
            // Block
        PElseBlock pelseblockNode2;
        pelseblockNode2 = (PElseBlock)nodeArrayList1.get(0);

        pelseblockmaybeNode1 = new AElseBlockMaybe(pelseblockNode2);
        }
	nodeList.add(pelseblockmaybeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AElseBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseBlock pelseblockNode1;
        {
            // Block
        TElse telseNode2;
        PBlock pblockNode3;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        pblockNode3 = (PBlock)nodeArrayList2.get(0);

        pelseblockNode1 = new AElseBlock(telseNode2, pblockNode3);
        }
	nodeList.add(pelseblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AWhileStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PWhileStatement pwhilestatementNode1;
        {
            // Block
        TWhile twhileNode2;
        PExpression pexpressionNode3;
        TDo tdoNode4;
        PBlock pblockNode5;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tdoNode4 = (TDo)nodeArrayList3.get(0);
        pblockNode5 = (PBlock)nodeArrayList4.get(0);

        pwhilestatementNode1 = new AWhileStatement(twhileNode2, pexpressionNode3, tdoNode4, pblockNode5);
        }
	nodeList.add(pwhilestatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AReturnStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PReturnStatement preturnstatementNode1;
        {
            // Block
        TReturn treturnNode2;
        PExpression pexpressionNode3;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        preturnstatementNode1 = new AReturnStatement(treturnNode2, pexpressionNode3);
        }
	nodeList.add(preturnstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AFunctionCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionCall pfunctioncallNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TLPar tlparNode3;
        PArguments pargumentsNode4;
        TRPar trparNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pargumentsNode4 = (PArguments)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pfunctioncallNode1 = new AFunctionCall(tidentifierNode2, tlparNode3, pargumentsNode4, trparNode5);
        }
	nodeList.add(pfunctioncallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AAarguments1Arguments */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PArguments pargumentsNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;

        pargumentsNode1 = new AArguments(null);
        }
	nodeList.add(pargumentsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AAarguments2Arguments */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArguments pargumentsNode1;
        {
            // Block
        PArgumentsExpression pargumentsexpressionNode2;
        pargumentsexpressionNode2 = (PArgumentsExpression)nodeArrayList1.get(0);

        pargumentsNode1 = new AArguments(pargumentsexpressionNode2);
        }
	nodeList.add(pargumentsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AAargumentsexpression1ArgumentsExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgumentsExpression pargumentsexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
            // Block
        }

        pargumentsexpressionNode1 = new AArgumentsExpression(pexpressionNode2, listNode3);
        }
	nodeList.add(pargumentsexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AAargumentsexpression2ArgumentsExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgumentsExpression pargumentsexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pargumentsexpressionNode1 = new AArgumentsExpression(pexpressionNode2, listNode4);
        }
	nodeList.add(pargumentsexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AAargumentscomma1ArgumentsComma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgumentsComma pargumentscommaNode1;
        {
            // Block
        TComma tcommaNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);

        pargumentscommaNode1 = new AArgumentsComma(tcommaNode2, null);
        }
	nodeList.add(pargumentscommaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AAargumentscomma2ArgumentsComma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgumentsComma pargumentscommaNode1;
        {
            // Block
        TComma tcommaNode2;
        PExpression pexpressionNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        pargumentscommaNode1 = new AArgumentsComma(tcommaNode2, pexpressionNode3);
        }
	nodeList.add(pargumentscommaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AAexpression1Expression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PSimpleExpression psimpleexpressionNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        psimpleexpressionNode2 = (PSimpleExpression)nodeArrayList1.get(0);

        pexpressionNode1 = new AExpression(psimpleexpressionNode2, null);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AAexpression2Expression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PSimpleExpression psimpleexpressionNode2;
        PCompExpr pcompexprNode3;
        psimpleexpressionNode2 = (PSimpleExpression)nodeArrayList1.get(0);
        pcompexprNode3 = (PCompExpr)nodeArrayList2.get(0);

        pexpressionNode1 = new AExpression(psimpleexpressionNode2, pcompexprNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AEquCompExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompExpr pcompexprNode1;
        {
            // Block
        TEqu tequNode2;
        tequNode2 = (TEqu)nodeArrayList1.get(0);

        pcompexprNode1 = new AEquCompExpr(tequNode2);
        }
	nodeList.add(pcompexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AInfCompExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompExpr pcompexprNode1;
        {
            // Block
        TInf tinfNode2;
        tinfNode2 = (TInf)nodeArrayList1.get(0);

        pcompexprNode1 = new AInfCompExpr(tinfNode2);
        }
	nodeList.add(pcompexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AAsimpleexpression1SimpleExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleExpression psimpleexpressionNode1;
        {
            // Block
        PTerm ptermNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        {
            // Block
        }

        psimpleexpressionNode1 = new ASimpleExpression(ptermNode2, listNode3);
        }
	nodeList.add(psimpleexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AAsimpleexpression2SimpleExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleExpression psimpleexpressionNode1;
        {
            // Block
        PTerm ptermNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        psimpleexpressionNode1 = new ASimpleExpression(ptermNode2, listNode4);
        }
	nodeList.add(psimpleexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce APlusAddTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAddTerm paddtermNode1;
        {
            // Block
        TPlus tplusNode2;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);

        paddtermNode1 = new APlusAddTerm(tplusNode2);
        }
	nodeList.add(paddtermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AMinusAddTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAddTerm paddtermNode1;
        {
            // Block
        TMinus tminusNode2;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);

        paddtermNode1 = new AMinusAddTerm(tminusNode2);
        }
	nodeList.add(paddtermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AAterm1Term */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PFactor pfactorNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        {
            // Block
        }

        ptermNode1 = new ATerm(pfactorNode2, listNode3);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AAterm2Term */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PFactor pfactorNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        ptermNode1 = new ATerm(pfactorNode2, listNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AMultMultTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultTerm pmulttermNode1;
        {
            // Block
        TMult tmultNode2;
        tmultNode2 = (TMult)nodeArrayList1.get(0);

        pmulttermNode1 = new AMultMultTerm(tmultNode2);
        }
	nodeList.add(pmulttermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce ADivMultTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultTerm pmulttermNode1;
        {
            // Block
        TDiv tdivNode2;
        tdivNode2 = (TDiv)nodeArrayList1.get(0);

        pmulttermNode1 = new ADivMultTerm(tdivNode2);
        }
	nodeList.add(pmulttermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AIdentifierFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pfactorNode1 = new AIdentifierFactor(tidentifierNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AIntegerFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TInteger tintegerNode2;
        tintegerNode2 = (TInteger)nodeArrayList1.get(0);

        pfactorNode1 = new AIntegerFactor(tintegerNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AFunctionCallFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PFunctionCall pfunctioncallNode2;
        pfunctioncallNode2 = (PFunctionCall)nodeArrayList1.get(0);

        pfactorNode1 = new AFunctionCallFactor(pfunctioncallNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce ABooleanFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TBool tboolNode2;
        tboolNode2 = (TBool)nodeArrayList1.get(0);

        pfactorNode1 = new ABooleanFactor(tboolNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce ANotFactorFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TNot tnotNode2;
        PFactor pfactorNode3;
        tnotNode2 = (TNot)nodeArrayList1.get(0);
        pfactorNode3 = (PFactor)nodeArrayList2.get(0);

        pfactorNode1 = new ANotFactorFactor(tnotNode2, pfactorNode3);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AInfComparator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparator pcomparatorNode1;
        {
            // Block
        TInf tinfNode2;
        tinfNode2 = (TInf)nodeArrayList1.get(0);

        pcomparatorNode1 = new AInfComparator(tinfNode2);
        }
	nodeList.add(pcomparatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce ATerminal$Function */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PFunction pfunctionNode1;
        pfunctionNode1 = (PFunction)nodeArrayList1.get(0);
	if(pfunctionNode1 != null)
	{
	  listNode2.add(pfunctionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce ANonTerminal$Function */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PFunction pfunctionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pfunctionNode2 = (PFunction)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pfunctionNode2 != null)
	{
	  listNode3.add(pfunctionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce ATerminal$CommaParameter */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PCommaParameter pcommaparameterNode1;
        pcommaparameterNode1 = (PCommaParameter)nodeArrayList1.get(0);
	if(pcommaparameterNode1 != null)
	{
	  listNode2.add(pcommaparameterNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ANonTerminal$CommaParameter */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PCommaParameter pcommaparameterNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcommaparameterNode2 = (PCommaParameter)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcommaparameterNode2 != null)
	{
	  listNode3.add(pcommaparameterNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce ATerminal$Parameter */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PParameter pparameterNode1;
        pparameterNode1 = (PParameter)nodeArrayList1.get(0);
	if(pparameterNode1 != null)
	{
	  listNode2.add(pparameterNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ANonTerminal$Parameter */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PParameter pparameterNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pparameterNode2 = (PParameter)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pparameterNode2 != null)
	{
	  listNode3.add(pparameterNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce ATerminal$Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	if(pstatementNode1 != null)
	{
	  listNode2.add(pstatementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce ANonTerminal$Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PStatement pstatementNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstatementNode2 = (PStatement)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstatementNode2 != null)
	{
	  listNode3.add(pstatementNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce ATerminal$ArgumentsComma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PArgumentsComma pargumentscommaNode1;
        pargumentscommaNode1 = (PArgumentsComma)nodeArrayList1.get(0);
	if(pargumentscommaNode1 != null)
	{
	  listNode2.add(pargumentscommaNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce ANonTerminal$ArgumentsComma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PArgumentsComma pargumentscommaNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pargumentscommaNode2 = (PArgumentsComma)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pargumentscommaNode2 != null)
	{
	  listNode3.add(pargumentscommaNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce ATerminal$AddTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAddTerm paddtermNode1;
        paddtermNode1 = (PAddTerm)nodeArrayList1.get(0);
	if(paddtermNode1 != null)
	{
	  listNode2.add(paddtermNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce ANonTerminal$AddTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAddTerm paddtermNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        paddtermNode2 = (PAddTerm)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(paddtermNode2 != null)
	{
	  listNode3.add(paddtermNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce ATerminal$MultTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PMultTerm pmulttermNode1;
        pmulttermNode1 = (PMultTerm)nodeArrayList1.get(0);
	if(pmulttermNode1 != null)
	{
	  listNode2.add(pmulttermNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce ANonTerminal$MultTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PMultTerm pmulttermNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmulttermNode2 = (PMultTerm)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmulttermNode2 != null)
	{
	  listNode3.add(pmulttermNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {20, SHIFT, 1}, {21, SHIFT, 2}, {22, SHIFT, 3}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 4}, {31, ACCEPT, -1}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 6}, {2, SHIFT, 10}, },
			{{-1, REDUCE, 9}, {13, SHIFT, 11}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 1}, {20, SHIFT, 1}, {21, SHIFT, 2}, {22, SHIFT, 3}, },
			{{-1, ERROR, 10}, {9, SHIFT, 13}, },
			{{-1, ERROR, 11}, {14, SHIFT, 14}, },
			{{-1, REDUCE, 67}, },
			{{-1, ERROR, 13}, {20, SHIFT, 1}, {21, SHIFT, 2}, {22, SHIFT, 3}, {29, SHIFT, 15}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 6}, {7, SHIFT, 19}, {29, SHIFT, 20}, },
			{{-1, ERROR, 17}, {10, SHIFT, 23}, },
			{{-1, ERROR, 18}, {2, SHIFT, 24}, },
			{{-1, ERROR, 19}, {20, SHIFT, 1}, {21, SHIFT, 2}, {22, SHIFT, 3}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 7}, {7, SHIFT, 19}, {29, SHIFT, 20}, },
			{{-1, ERROR, 23}, {11, SHIFT, 27}, {20, SHIFT, 1}, {21, SHIFT, 2}, {22, SHIFT, 3}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 18}, {2, SHIFT, 31}, {23, SHIFT, 32}, {26, SHIFT, 33}, {28, SHIFT, 34}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 30}, {11, SHIFT, 43}, {20, SHIFT, 1}, {21, SHIFT, 2}, {22, SHIFT, 3}, },
			{{-1, ERROR, 31}, {9, SHIFT, 45}, {16, SHIFT, 46}, },
			{{-1, ERROR, 32}, {0, SHIFT, 47}, {1, SHIFT, 48}, {2, SHIFT, 49}, {19, SHIFT, 50}, },
			{{-1, ERROR, 33}, {0, SHIFT, 47}, {1, SHIFT, 48}, {2, SHIFT, 49}, {19, SHIFT, 50}, },
			{{-1, ERROR, 34}, {0, SHIFT, 47}, {1, SHIFT, 48}, {2, SHIFT, 49}, {19, SHIFT, 50}, },
			{{-1, REDUCE, 15}, {12, SHIFT, 58}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 19}, {2, SHIFT, 31}, {23, SHIFT, 32}, {26, SHIFT, 33}, {28, SHIFT, 34}, },
			{{-1, REDUCE, 18}, {2, SHIFT, 31}, {23, SHIFT, 32}, {26, SHIFT, 33}, {28, SHIFT, 34}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 42}, {0, SHIFT, 47}, {1, SHIFT, 48}, {2, SHIFT, 49}, {19, SHIFT, 50}, },
			{{-1, ERROR, 46}, {0, SHIFT, 64}, {2, SHIFT, 65}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 60}, {9, SHIFT, 45}, },
			{{-1, ERROR, 50}, {0, SHIFT, 47}, {1, SHIFT, 48}, {2, SHIFT, 49}, {19, SHIFT, 50}, },
			{{-1, REDUCE, 62}, },
			{{-1, ERROR, 52}, {24, SHIFT, 68}, },
			{{-1, REDUCE, 48}, {15, SHIFT, 69}, {16, SHIFT, 70}, },
			{{-1, REDUCE, 52}, {3, SHIFT, 72}, {4, SHIFT, 73}, },
			{{-1, REDUCE, 56}, {5, SHIFT, 76}, {6, SHIFT, 77}, },
			{{-1, ERROR, 56}, {27, SHIFT, 80}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 73}, },
			{{-1, ERROR, 60}, {12, SHIFT, 81}, },
			{{-1, ERROR, 61}, {10, SHIFT, 82}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 44}, {7, SHIFT, 83}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 66}, {3, SHIFT, 86}, {4, SHIFT, 87}, {5, SHIFT, 88}, {6, SHIFT, 89}, },
			{{-1, REDUCE, 64}, },
			{{-1, ERROR, 68}, {11, SHIFT, 91}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 53}, {3, SHIFT, 72}, {4, SHIFT, 73}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 57}, {5, SHIFT, 76}, {6, SHIFT, 77}, },
			{{-1, ERROR, 80}, {11, SHIFT, 91}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 46}, {0, SHIFT, 47}, {1, SHIFT, 48}, {2, SHIFT, 49}, {19, SHIFT, 50}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 45}, {7, SHIFT, 83}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 90}, {0, SHIFT, 98}, {2, SHIFT, 99}, },
			{{-1, ERROR, 91}, {2, SHIFT, 31}, {23, SHIFT, 32}, {26, SHIFT, 33}, {28, SHIFT, 34}, },
			{{-1, REDUCE, 36}, {25, SHIFT, 102}, },
			{{-1, REDUCE, 77}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 101}, {12, SHIFT, 105}, },
			{{-1, ERROR, 102}, {11, SHIFT, 91}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 38}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 4}, },
			{{-1, 5}, {9, 12}, },
			{{-1, 16}, {19, 25}, {23, 28}, {30, 44}, },
			{{-1, 21}, {22, 26}, },
			{{-1, 17}, },
			{{-1, 18}, {0, 6}, {9, 6}, },
			{{-1, 7}, },
			{{-1, 8}, },
			{{-1, 29}, },
			{{-1, 35}, {43, 60}, },
			{{-1, 36}, {42, 59}, {91, 101}, },
			{{-1, 92}, {80, 95}, {102, 106}, },
			{{-1, 37}, },
			{{-1, 66}, },
			{{-1, 100}, },
			{{-1, 90}, },
			{{-1, 38}, },
			{{-1, 103}, },
			{{-1, 104}, },
			{{-1, 39}, },
			{{-1, 40}, },
			{{-1, 51}, {27, 41}, {42, 41}, {43, 41}, {91, 41}, },
			{{-1, 61}, },
			{{-1, 62}, },
			{{-1, 84}, {85, 97}, },
			{{-1, 52}, {33, 56}, {34, 57}, {45, 63}, {83, 96}, },
			{{-1, 71}, },
			{{-1, 53}, },
			{{-1, 74}, {75, 93}, },
			{{-1, 54}, },
			{{-1, 78}, {79, 94}, },
			{{-1, 55}, {50, 67}, },
			{{-1, -1}, },
			{{-1, 9}, },
			{{-1, 22}, },
			{{-1, 30}, },
			{{-1, 42}, },
			{{-1, 85}, },
			{{-1, 75}, },
			{{-1, 79}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'entier', 'booleen', 'void', EOF",
			"expecting: identifier, '['",
			"expecting: identifier",
			"expecting: EOF",
			"expecting: '('",
			"expecting: ']'",
			"expecting: 'entier', 'booleen', 'void', ' '",
			"expecting: ')'",
			"expecting: ',', ')', ' '",
			"expecting: 'entier', 'booleen', 'void'",
			"expecting: '{', 'entier', 'booleen', 'void'",
			"expecting: ',', ')', '{', 'entier', 'booleen', 'void', ' '",
			"expecting: identifier, '}', 'entier', 'booleen', 'void', 'si', 'tantque', 'retour', EOF",
			"expecting: '(', '='",
			"expecting: integer, bool, identifier, '!'",
			"expecting: '}', 'entier', 'booleen', 'void', EOF",
			"expecting: identifier, '}', 'si', 'tantque', 'retour'",
			"expecting: integer, bool, identifier, ')', '!'",
			"expecting: integer, identifier",
			"expecting: identifier, '+', '-', '*', '/', ',', ')', '}', '<', '=', 'entier', 'booleen', 'void', 'si', 'alors', 'tantque', 'faire', 'retour', EOF",
			"expecting: identifier, '+', '-', '*', '/', ',', '(', ')', '}', '<', '=', 'entier', 'booleen', 'void', 'si', 'alors', 'tantque', 'faire', 'retour', EOF",
			"expecting: 'alors'",
			"expecting: identifier, ',', ')', '}', '<', '=', 'entier', 'booleen', 'void', 'si', 'alors', 'tantque', 'faire', 'retour', EOF",
			"expecting: identifier, '+', '-', ',', ')', '}', '<', '=', 'entier', 'booleen', 'void', 'si', 'alors', 'tantque', 'faire', 'retour', EOF",
			"expecting: 'faire'",
			"expecting: '}'",
			"expecting: ',', ')'",
			"expecting: '+', '-', '*', '/'",
			"expecting: '{'",
			"expecting: identifier, ',', ')', '}', 'entier', 'booleen', 'void', 'si', 'alors', 'tantque', 'faire', 'retour', EOF",
			"expecting: integer, bool, identifier, ',', ')', '!'",
			"expecting: identifier, 'si', 'tantque', 'retour'",
			"expecting: identifier, '}', 'entier', 'booleen', 'void', 'si', 'sinon', 'tantque', 'retour', EOF",
        };*/
    private static int[] errors;
/*      {
			0, 1, 1, 2, 3, 0, 2, 1, 2, 0, 4, 5, 0, 6, 2, 7, 8, 7, 2, 9, 8, 8, 8, 10, 11, 8, 8, 12, 10, 0, 10, 13, 14, 14, 14, 15, 12, 12, 12, 12, 12, 12, 12, 16, 10, 17, 18, 19, 19, 20, 14, 19, 21, 22, 23, 19, 24, 12, 0, 12, 25, 7, 7, 26, 27, 27, 27, 19, 28, 29, 29, 29, 23, 23, 23, 23, 19, 19, 19, 19, 28, 0, 19, 30, 26, 26, 18, 18, 18, 18, 18, 31, 32, 23, 19, 12, 26, 26, 12, 12, 12, 25, 28, 12, 12, 32, 12, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
