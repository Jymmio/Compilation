/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgram().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        {
            List<PFunction> copy = new ArrayList<PFunction>(node.getFunction());
            for(PFunction e : copy)
            {
                e.apply(this);
            }
        }
        outAProgram(node);
    }

    public void inAFunction(AFunction node)
    {
        defaultIn(node);
    }

    public void outAFunction(AFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunction(AFunction node)
    {
        inAFunction(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getParameters() != null)
        {
            node.getParameters().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getBegin() != null)
        {
            node.getBegin().apply(this);
        }
        outAFunction(node);
    }

    public void inAParameter(AParameter node)
    {
        defaultIn(node);
    }

    public void outAParameter(AParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParameter(AParameter node)
    {
        inAParameter(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAParameter(node);
    }

    public void inAParameterCommaParameter(AParameterCommaParameter node)
    {
        defaultIn(node);
    }

    public void outAParameterCommaParameter(AParameterCommaParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParameterCommaParameter(AParameterCommaParameter node)
    {
        inAParameterCommaParameter(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getParameter() != null)
        {
            node.getParameter().apply(this);
        }
        outAParameterCommaParameter(node);
    }

    public void inANothingCommaParameter(ANothingCommaParameter node)
    {
        defaultIn(node);
    }

    public void outANothingCommaParameter(ANothingCommaParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANothingCommaParameter(ANothingCommaParameter node)
    {
        inANothingCommaParameter(node);
        if(node.getBlank() != null)
        {
            node.getBlank().apply(this);
        }
        outANothingCommaParameter(node);
    }

    public void inAParameterParameters(AParameterParameters node)
    {
        defaultIn(node);
    }

    public void outAParameterParameters(AParameterParameters node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParameterParameters(AParameterParameters node)
    {
        inAParameterParameters(node);
        if(node.getParameter() != null)
        {
            node.getParameter().apply(this);
        }
        {
            List<PCommaParameter> copy = new ArrayList<PCommaParameter>(node.getCommaParameter());
            for(PCommaParameter e : copy)
            {
                e.apply(this);
            }
        }
        outAParameterParameters(node);
    }

    public void inANothingParameters(ANothingParameters node)
    {
        defaultIn(node);
    }

    public void outANothingParameters(ANothingParameters node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANothingParameters(ANothingParameters node)
    {
        inANothingParameters(node);
        if(node.getBlank() != null)
        {
            node.getBlank().apply(this);
        }
        outANothingParameters(node);
    }

    public void inAPrimaryTypeType(APrimaryTypeType node)
    {
        defaultIn(node);
    }

    public void outAPrimaryTypeType(APrimaryTypeType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryTypeType(APrimaryTypeType node)
    {
        inAPrimaryTypeType(node);
        if(node.getPrimaryType() != null)
        {
            node.getPrimaryType().apply(this);
        }
        outAPrimaryTypeType(node);
    }

    public void inATableauType(ATableauType node)
    {
        defaultIn(node);
    }

    public void outATableauType(ATableauType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATableauType(ATableauType node)
    {
        inATableauType(node);
        if(node.getArray() != null)
        {
            node.getArray().apply(this);
        }
        outATableauType(node);
    }

    public void inARienType(ARienType node)
    {
        defaultIn(node);
    }

    public void outARienType(ARienType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARienType(ARienType node)
    {
        inARienType(node);
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        outARienType(node);
    }

    public void inAIntPrimaryType(AIntPrimaryType node)
    {
        defaultIn(node);
    }

    public void outAIntPrimaryType(AIntPrimaryType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntPrimaryType(AIntPrimaryType node)
    {
        inAIntPrimaryType(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntPrimaryType(node);
    }

    public void inABooleanPrimaryType(ABooleanPrimaryType node)
    {
        defaultIn(node);
    }

    public void outABooleanPrimaryType(ABooleanPrimaryType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanPrimaryType(ABooleanPrimaryType node)
    {
        inABooleanPrimaryType(node);
        if(node.getBoolean() != null)
        {
            node.getBoolean().apply(this);
        }
        outABooleanPrimaryType(node);
    }

    public void inAArray(AArray node)
    {
        defaultIn(node);
    }

    public void outAArray(AArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArray(AArray node)
    {
        inAArray(node);
        if(node.getPrimaryType() != null)
        {
            node.getPrimaryType().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outAArray(node);
    }

    public void inANoVarBegin(ANoVarBegin node)
    {
        defaultIn(node);
    }

    public void outANoVarBegin(ANoVarBegin node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoVarBegin(ANoVarBegin node)
    {
        inANoVarBegin(node);
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getStatements() != null)
        {
            node.getStatements().apply(this);
        }
        outANoVarBegin(node);
    }

    public void inAWithVarBegin(AWithVarBegin node)
    {
        defaultIn(node);
    }

    public void outAWithVarBegin(AWithVarBegin node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWithVarBegin(AWithVarBegin node)
    {
        inAWithVarBegin(node);
        {
            List<PParameter> copy = new ArrayList<PParameter>(node.getParameter());
            for(PParameter e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getStatements() != null)
        {
            node.getStatements().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outAWithVarBegin(node);
    }

    public void inAStatements(AStatements node)
    {
        defaultIn(node);
    }

    public void outAStatements(AStatements node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStatements(AStatements node)
    {
        inAStatements(node);
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatement());
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        outAStatements(node);
    }

    public void inAAssignmentStatement(AAssignmentStatement node)
    {
        defaultIn(node);
    }

    public void outAAssignmentStatement(AAssignmentStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignmentStatement(AAssignmentStatement node)
    {
        inAAssignmentStatement(node);
        if(node.getAssignment() != null)
        {
            node.getAssignment().apply(this);
        }
        outAAssignmentStatement(node);
    }

    public void inAIfStatementStatement(AIfStatementStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatementStatement(AIfStatementStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStatementStatement(AIfStatementStatement node)
    {
        inAIfStatementStatement(node);
        if(node.getIfStatement() != null)
        {
            node.getIfStatement().apply(this);
        }
        outAIfStatementStatement(node);
    }

    public void inAWhileStatementStatement(AWhileStatementStatement node)
    {
        defaultIn(node);
    }

    public void outAWhileStatementStatement(AWhileStatementStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStatementStatement(AWhileStatementStatement node)
    {
        inAWhileStatementStatement(node);
        if(node.getWhileStatement() != null)
        {
            node.getWhileStatement().apply(this);
        }
        outAWhileStatementStatement(node);
    }

    public void inAReturnStatementStatement(AReturnStatementStatement node)
    {
        defaultIn(node);
    }

    public void outAReturnStatementStatement(AReturnStatementStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnStatementStatement(AReturnStatementStatement node)
    {
        inAReturnStatementStatement(node);
        if(node.getReturnStatement() != null)
        {
            node.getReturnStatement().apply(this);
        }
        outAReturnStatementStatement(node);
    }

    public void inAFunctionCallStatement(AFunctionCallStatement node)
    {
        defaultIn(node);
    }

    public void outAFunctionCallStatement(AFunctionCallStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionCallStatement(AFunctionCallStatement node)
    {
        inAFunctionCallStatement(node);
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        outAFunctionCallStatement(node);
    }

    public void inABlock(ABlock node)
    {
        defaultIn(node);
    }

    public void outABlock(ABlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlock(ABlock node)
    {
        inABlock(node);
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outABlock(node);
    }

    public void inAAssignment(AAssignment node)
    {
        defaultIn(node);
    }

    public void outAAssignment(AAssignment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignment(AAssignment node)
    {
        inAAssignment(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getEqu() != null)
        {
            node.getEqu().apply(this);
        }
        if(node.getFirstNameOrInt() != null)
        {
            node.getFirstNameOrInt().apply(this);
        }
        if(node.getCalc() != null)
        {
            node.getCalc().apply(this);
        }
        if(node.getSecondNameOrInt() != null)
        {
            node.getSecondNameOrInt().apply(this);
        }
        outAAssignment(node);
    }

    public void inAIdentifierFirstNameOrInt(AIdentifierFirstNameOrInt node)
    {
        defaultIn(node);
    }

    public void outAIdentifierFirstNameOrInt(AIdentifierFirstNameOrInt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierFirstNameOrInt(AIdentifierFirstNameOrInt node)
    {
        inAIdentifierFirstNameOrInt(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierFirstNameOrInt(node);
    }

    public void inAIntFirstNameOrInt(AIntFirstNameOrInt node)
    {
        defaultIn(node);
    }

    public void outAIntFirstNameOrInt(AIntFirstNameOrInt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntFirstNameOrInt(AIntFirstNameOrInt node)
    {
        inAIntFirstNameOrInt(node);
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outAIntFirstNameOrInt(node);
    }

    public void inAIdentifierSecondNameOrInt(AIdentifierSecondNameOrInt node)
    {
        defaultIn(node);
    }

    public void outAIdentifierSecondNameOrInt(AIdentifierSecondNameOrInt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierSecondNameOrInt(AIdentifierSecondNameOrInt node)
    {
        inAIdentifierSecondNameOrInt(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierSecondNameOrInt(node);
    }

    public void inAIntSecondNameOrInt(AIntSecondNameOrInt node)
    {
        defaultIn(node);
    }

    public void outAIntSecondNameOrInt(AIntSecondNameOrInt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntSecondNameOrInt(AIntSecondNameOrInt node)
    {
        inAIntSecondNameOrInt(node);
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outAIntSecondNameOrInt(node);
    }

    public void inAPlusCalc(APlusCalc node)
    {
        defaultIn(node);
    }

    public void outAPlusCalc(APlusCalc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusCalc(APlusCalc node)
    {
        inAPlusCalc(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusCalc(node);
    }

    public void inAMinusCalc(AMinusCalc node)
    {
        defaultIn(node);
    }

    public void outAMinusCalc(AMinusCalc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusCalc(AMinusCalc node)
    {
        inAMinusCalc(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusCalc(node);
    }

    public void inAMultCalc(AMultCalc node)
    {
        defaultIn(node);
    }

    public void outAMultCalc(AMultCalc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultCalc(AMultCalc node)
    {
        inAMultCalc(node);
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        outAMultCalc(node);
    }

    public void inADivCalc(ADivCalc node)
    {
        defaultIn(node);
    }

    public void outADivCalc(ADivCalc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivCalc(ADivCalc node)
    {
        inADivCalc(node);
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        outADivCalc(node);
    }

    public void inAIfStatement(AIfStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatement(AIfStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStatement(AIfStatement node)
    {
        inAIfStatement(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getElseBlockMaybe() != null)
        {
            node.getElseBlockMaybe().apply(this);
        }
        outAIfStatement(node);
    }

    public void inAElseBlockMaybe(AElseBlockMaybe node)
    {
        defaultIn(node);
    }

    public void outAElseBlockMaybe(AElseBlockMaybe node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseBlockMaybe(AElseBlockMaybe node)
    {
        inAElseBlockMaybe(node);
        if(node.getElseBlock() != null)
        {
            node.getElseBlock().apply(this);
        }
        outAElseBlockMaybe(node);
    }

    public void inAElseBlock(AElseBlock node)
    {
        defaultIn(node);
    }

    public void outAElseBlock(AElseBlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseBlock(AElseBlock node)
    {
        inAElseBlock(node);
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outAElseBlock(node);
    }

    public void inAWhileStatement(AWhileStatement node)
    {
        defaultIn(node);
    }

    public void outAWhileStatement(AWhileStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStatement(AWhileStatement node)
    {
        inAWhileStatement(node);
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outAWhileStatement(node);
    }

    public void inAReturnStatement(AReturnStatement node)
    {
        defaultIn(node);
    }

    public void outAReturnStatement(AReturnStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnStatement(AReturnStatement node)
    {
        inAReturnStatement(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAReturnStatement(node);
    }

    public void inAFunctionCall(AFunctionCall node)
    {
        defaultIn(node);
    }

    public void outAFunctionCall(AFunctionCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionCall(AFunctionCall node)
    {
        inAFunctionCall(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getArguments() != null)
        {
            node.getArguments().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAFunctionCall(node);
    }

    public void inAArguments(AArguments node)
    {
        defaultIn(node);
    }

    public void outAArguments(AArguments node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArguments(AArguments node)
    {
        inAArguments(node);
        if(node.getArgumentsExpression() != null)
        {
            node.getArgumentsExpression().apply(this);
        }
        outAArguments(node);
    }

    public void inAArgumentsExpression(AArgumentsExpression node)
    {
        defaultIn(node);
    }

    public void outAArgumentsExpression(AArgumentsExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgumentsExpression(AArgumentsExpression node)
    {
        inAArgumentsExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            List<PArgumentsComma> copy = new ArrayList<PArgumentsComma>(node.getArgumentsComma());
            for(PArgumentsComma e : copy)
            {
                e.apply(this);
            }
        }
        outAArgumentsExpression(node);
    }

    public void inAArgumentsComma(AArgumentsComma node)
    {
        defaultIn(node);
    }

    public void outAArgumentsComma(AArgumentsComma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgumentsComma(AArgumentsComma node)
    {
        inAArgumentsComma(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAArgumentsComma(node);
    }

    public void inAExpression(AExpression node)
    {
        defaultIn(node);
    }

    public void outAExpression(AExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpression(AExpression node)
    {
        inAExpression(node);
        if(node.getSimpleExpression() != null)
        {
            node.getSimpleExpression().apply(this);
        }
        if(node.getCompExpr() != null)
        {
            node.getCompExpr().apply(this);
        }
        outAExpression(node);
    }

    public void inAEquCompExpr(AEquCompExpr node)
    {
        defaultIn(node);
    }

    public void outAEquCompExpr(AEquCompExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEquCompExpr(AEquCompExpr node)
    {
        inAEquCompExpr(node);
        if(node.getEqu() != null)
        {
            node.getEqu().apply(this);
        }
        outAEquCompExpr(node);
    }

    public void inAInfCompExpr(AInfCompExpr node)
    {
        defaultIn(node);
    }

    public void outAInfCompExpr(AInfCompExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInfCompExpr(AInfCompExpr node)
    {
        inAInfCompExpr(node);
        if(node.getInf() != null)
        {
            node.getInf().apply(this);
        }
        outAInfCompExpr(node);
    }

    public void inASimpleExpression(ASimpleExpression node)
    {
        defaultIn(node);
    }

    public void outASimpleExpression(ASimpleExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleExpression(ASimpleExpression node)
    {
        inASimpleExpression(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        {
            List<PAddTerm> copy = new ArrayList<PAddTerm>(node.getAddTerm());
            for(PAddTerm e : copy)
            {
                e.apply(this);
            }
        }
        outASimpleExpression(node);
    }

    public void inAPlusAddTerm(APlusAddTerm node)
    {
        defaultIn(node);
    }

    public void outAPlusAddTerm(APlusAddTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusAddTerm(APlusAddTerm node)
    {
        inAPlusAddTerm(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusAddTerm(node);
    }

    public void inAMinusAddTerm(AMinusAddTerm node)
    {
        defaultIn(node);
    }

    public void outAMinusAddTerm(AMinusAddTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusAddTerm(AMinusAddTerm node)
    {
        inAMinusAddTerm(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusAddTerm(node);
    }

    public void inATerm(ATerm node)
    {
        defaultIn(node);
    }

    public void outATerm(ATerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATerm(ATerm node)
    {
        inATerm(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        {
            List<PMultTerm> copy = new ArrayList<PMultTerm>(node.getMultTerm());
            for(PMultTerm e : copy)
            {
                e.apply(this);
            }
        }
        outATerm(node);
    }

    public void inAMultMultTerm(AMultMultTerm node)
    {
        defaultIn(node);
    }

    public void outAMultMultTerm(AMultMultTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultMultTerm(AMultMultTerm node)
    {
        inAMultMultTerm(node);
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        outAMultMultTerm(node);
    }

    public void inADivMultTerm(ADivMultTerm node)
    {
        defaultIn(node);
    }

    public void outADivMultTerm(ADivMultTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivMultTerm(ADivMultTerm node)
    {
        inADivMultTerm(node);
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        outADivMultTerm(node);
    }

    public void inAIdentifierFactor(AIdentifierFactor node)
    {
        defaultIn(node);
    }

    public void outAIdentifierFactor(AIdentifierFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierFactor(AIdentifierFactor node)
    {
        inAIdentifierFactor(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierFactor(node);
    }

    public void inAIntegerFactor(AIntegerFactor node)
    {
        defaultIn(node);
    }

    public void outAIntegerFactor(AIntegerFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerFactor(AIntegerFactor node)
    {
        inAIntegerFactor(node);
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outAIntegerFactor(node);
    }

    public void inAFunctionCallFactor(AFunctionCallFactor node)
    {
        defaultIn(node);
    }

    public void outAFunctionCallFactor(AFunctionCallFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionCallFactor(AFunctionCallFactor node)
    {
        inAFunctionCallFactor(node);
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        outAFunctionCallFactor(node);
    }

    public void inABooleanFactor(ABooleanFactor node)
    {
        defaultIn(node);
    }

    public void outABooleanFactor(ABooleanFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanFactor(ABooleanFactor node)
    {
        inABooleanFactor(node);
        if(node.getBool() != null)
        {
            node.getBool().apply(this);
        }
        outABooleanFactor(node);
    }

    public void inANotFactorFactor(ANotFactorFactor node)
    {
        defaultIn(node);
    }

    public void outANotFactorFactor(ANotFactorFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotFactorFactor(ANotFactorFactor node)
    {
        inANotFactorFactor(node);
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outANotFactorFactor(node);
    }

    public void inAInfComparator(AInfComparator node)
    {
        defaultIn(node);
    }

    public void outAInfComparator(AInfComparator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInfComparator(AInfComparator node)
    {
        inAInfComparator(node);
        if(node.getInf() != null)
        {
            node.getInf().apply(this);
        }
        outAInfComparator(node);
    }
}
