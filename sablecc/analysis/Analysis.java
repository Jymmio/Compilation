/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseAFunction(AFunction node);
    void caseAParameter(AParameter node);
    void caseAParameterCommaParameter(AParameterCommaParameter node);
    void caseANothingCommaParameter(ANothingCommaParameter node);
    void caseAParameterParameters(AParameterParameters node);
    void caseANothingParameters(ANothingParameters node);
    void caseAPrimaryTypeType(APrimaryTypeType node);
    void caseATableauType(ATableauType node);
    void caseARienType(ARienType node);
    void caseAIntPrimaryType(AIntPrimaryType node);
    void caseABooleanPrimaryType(ABooleanPrimaryType node);
    void caseAArray(AArray node);
    void caseANoVarBegin(ANoVarBegin node);
    void caseAWithVarBegin(AWithVarBegin node);
    void caseAStatements(AStatements node);
    void caseAAssignmentStatement(AAssignmentStatement node);
    void caseAIfStatementStatement(AIfStatementStatement node);
    void caseAWhileStatementStatement(AWhileStatementStatement node);
    void caseAReturnStatementStatement(AReturnStatementStatement node);
    void caseAFunctionCallStatement(AFunctionCallStatement node);
    void caseABlock(ABlock node);
    void caseAAssignment(AAssignment node);
    void caseAIdentifierFirstNameOrInt(AIdentifierFirstNameOrInt node);
    void caseAIntFirstNameOrInt(AIntFirstNameOrInt node);
    void caseAIdentifierSecondNameOrInt(AIdentifierSecondNameOrInt node);
    void caseAIntSecondNameOrInt(AIntSecondNameOrInt node);
    void caseAPlusCalc(APlusCalc node);
    void caseAMinusCalc(AMinusCalc node);
    void caseAMultCalc(AMultCalc node);
    void caseADivCalc(ADivCalc node);
    void caseAIfStatement(AIfStatement node);
    void caseAElseBlockMaybe(AElseBlockMaybe node);
    void caseAElseBlock(AElseBlock node);
    void caseAWhileStatement(AWhileStatement node);
    void caseAReturnStatement(AReturnStatement node);
    void caseAFunctionCall(AFunctionCall node);
    void caseAArguments(AArguments node);
    void caseAArgumentsExpression(AArgumentsExpression node);
    void caseAArgumentsComma(AArgumentsComma node);
    void caseAExpression(AExpression node);
    void caseAEquCompExpr(AEquCompExpr node);
    void caseAInfCompExpr(AInfCompExpr node);
    void caseASimpleExpression(ASimpleExpression node);
    void caseAPlusAddTerm(APlusAddTerm node);
    void caseAMinusAddTerm(AMinusAddTerm node);
    void caseATerm(ATerm node);
    void caseAMultMultTerm(AMultMultTerm node);
    void caseADivMultTerm(ADivMultTerm node);
    void caseAIdentifierFactor(AIdentifierFactor node);
    void caseAIntegerFactor(AIntegerFactor node);
    void caseAFunctionCallFactor(AFunctionCallFactor node);
    void caseABooleanFactor(ABooleanFactor node);
    void caseANotFactorFactor(ANotFactorFactor node);
    void caseAInfComparator(AInfComparator node);

    void caseTInteger(TInteger node);
    void caseTBool(TBool node);
    void caseTIdentifier(TIdentifier node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTComma(TComma node);
    void caseTSemicolon(TSemicolon node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBrace(TLBrace node);
    void caseTRBrace(TRBrace node);
    void caseTLBracket(TLBracket node);
    void caseTRBracket(TRBracket node);
    void caseTInf(TInf node);
    void caseTEqu(TEqu node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTNot(TNot node);
    void caseTInt(TInt node);
    void caseTBoolean(TBoolean node);
    void caseTVoid(TVoid node);
    void caseTIf(TIf node);
    void caseTThen(TThen node);
    void caseTElse(TElse node);
    void caseTWhile(TWhile node);
    void caseTDo(TDo node);
    void caseTReturn(TReturn node);
    void caseTBlank(TBlank node);
    void caseTReservedWord(TReservedWord node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
