/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunction(AFunction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParameter(AParameter node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParameterCommaParameter(AParameterCommaParameter node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANothingCommaParameter(ANothingCommaParameter node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParameterParameters(AParameterParameters node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANothingParameters(ANothingParameters node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrimaryTypeType(APrimaryTypeType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATableauType(ATableauType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARienType(ARienType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntPrimaryType(AIntPrimaryType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABooleanPrimaryType(ABooleanPrimaryType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArray(AArray node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANoVarBegin(ANoVarBegin node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWithVarBegin(AWithVarBegin node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStatements(AStatements node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignmentStatement(AAssignmentStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfStatementStatement(AIfStatementStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWhileStatementStatement(AWhileStatementStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReturnStatementStatement(AReturnStatementStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionCallStatement(AFunctionCallStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABlock(ABlock node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignment(AAssignment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdentifierFirstNameOrInt(AIdentifierFirstNameOrInt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntFirstNameOrInt(AIntFirstNameOrInt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdentifierSecondNameOrInt(AIdentifierSecondNameOrInt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntSecondNameOrInt(AIntSecondNameOrInt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusCalc(APlusCalc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusCalc(AMinusCalc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultCalc(AMultCalc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivCalc(ADivCalc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfStatement(AIfStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElseBlockMaybe(AElseBlockMaybe node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElseBlock(AElseBlock node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWhileStatement(AWhileStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReturnStatement(AReturnStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionCall(AFunctionCall node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArguments(AArguments node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArgumentsExpression(AArgumentsExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArgumentsComma(AArgumentsComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpression(AExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEquCompExpr(AEquCompExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInfCompExpr(AInfCompExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleExpression(ASimpleExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusAddTerm(APlusAddTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusAddTerm(AMinusAddTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATerm(ATerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultMultTerm(AMultMultTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivMultTerm(ADivMultTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdentifierFactor(AIdentifierFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntegerFactor(AIntegerFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionCallFactor(AFunctionCallFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABooleanFactor(ABooleanFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANotFactorFactor(ANotFactorFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInfComparator(AInfComparator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInteger(TInteger node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBool(TBool node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSemicolon(TSemicolon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLBrace(TLBrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRBrace(TRBrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLBracket(TLBracket node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRBracket(TRBracket node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInf(TInf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEqu(TEqu node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInt(TInt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBoolean(TBoolean node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVoid(TVoid node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThen(TThen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDo(TDo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReservedWord(TReservedWord node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
