Helpers
    digit = ['0'..'9'];
    letter = ['a'..'z'] | ['A'..'Z'];

Tokens
    integer = '-'? digit+;
    bool = 'true' | 'false';
    identifier = letter (letter | digit)*;
    plus = '+';
    minus = '-';
    mult = '*';
    div = '/';
    comma = ',';
    semicolon = ';';
    l_par = '(';
    r_par = ')';
    l_brace = '{';
    r_brace = '}';
    l_bracket = '[';
    r_bracket = ']';
    inf = '<';
    equ = '=';
    and = '&';
    or = '|';
    not = '!';
    int = 'entier';
    boolean = 'booleen';
    void = 'void';
    if = 'si';
    then = 'alors';
    else = 'sinon';
    while = 'tantque';
    do = 'faire';
    return = 'retour';
    blank = ' ';

    reserved_word = 'si' | 'alors' | 'sinon' | 'tantque' | 'faire' | 'retour' | 'entier' | 'booleen' | 'vrai' | 'faux' | 'void';

Productions
    program = function*;

    function = type identifier l_par parameters r_par begin;

    parameter = type identifier;

    comma_parameter = {parameter} comma parameter | {nothing} blank;

    parameters = {parameter} parameter comma_parameter* | {nothing} blank;

    type = {primary_type} primary_type | {tableau} array | {rien} void;
    primary_type = {int} int | {boolean} boolean;

    array = primary_type l_bracket r_bracket;



    begin = {no_var} l_brace statements | {with_var} parameter* l_brace statements r_brace;

    statements = statement*;

    statement = {assignment} assignment
              | {if_statement} if_statement
              | {while_statement} while_statement
              | {return_statement} return_statement
              | {function_call} function_call;

    block = l_brace statement r_brace;

    assignment = identifier equ first_name_or_int calc second_name_or_int;

    first_name_or_int = {identifier} identifier | {int} integer;

    second_name_or_int = {identifier} identifier | {int} integer;

    calc = {plus} plus | {minus} minus | {mult} mult | {div} div;

    if_statement = if expression then block else_block_maybe;

    else_block_maybe = else_block?;

    else_block = else block;

    while_statement = while expression do block;

    return_statement = return expression;

    function_call = identifier l_par arguments r_par;

    arguments = arguments_expression?;

    arguments_expression = expression arguments_comma*;

    arguments_comma = comma expression?;

    expression = simple_expression comp_expr?;

    comp_expr = {equ} equ | {inf} inf;

    simple_expression = term add_term*;

    add_term = {plus} plus | {minus} minus;

    term = factor mult_term*;

    mult_term = {mult} mult | {div} div;

    factor = {identifier} identifier
           | {integer} integer
           | {function_call} function_call
           | {boolean} bool
           | {not_factor} not factor;

    comparator = {inf} inf;