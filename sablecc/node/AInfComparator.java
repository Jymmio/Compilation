/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AInfComparator extends PComparator
{
    private TInf _inf_;

    public AInfComparator()
    {
        // Constructor
    }

    public AInfComparator(
        @SuppressWarnings("hiding") TInf _inf_)
    {
        // Constructor
        setInf(_inf_);

    }

    @Override
    public Object clone()
    {
        return new AInfComparator(
            cloneNode(this._inf_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAInfComparator(this);
    }

    public TInf getInf()
    {
        return this._inf_;
    }

    public void setInf(TInf node)
    {
        if(this._inf_ != null)
        {
            this._inf_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._inf_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._inf_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._inf_ == child)
        {
            this._inf_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._inf_ == oldChild)
        {
            setInf((TInf) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
