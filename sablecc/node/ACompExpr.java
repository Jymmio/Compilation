/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class ACompExpr extends PCompExpr
{
    private PComparator _comparator_;
    private PSimpleExpression _simpleExpression_;

    public ACompExpr()
    {
        // Constructor
    }

    public ACompExpr(
        @SuppressWarnings("hiding") PComparator _comparator_,
        @SuppressWarnings("hiding") PSimpleExpression _simpleExpression_)
    {
        // Constructor
        setComparator(_comparator_);

        setSimpleExpression(_simpleExpression_);

    }

    @Override
    public Object clone()
    {
        return new ACompExpr(
            cloneNode(this._comparator_),
            cloneNode(this._simpleExpression_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACompExpr(this);
    }

    public PComparator getComparator()
    {
        return this._comparator_;
    }

    public void setComparator(PComparator node)
    {
        if(this._comparator_ != null)
        {
            this._comparator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comparator_ = node;
    }

    public PSimpleExpression getSimpleExpression()
    {
        return this._simpleExpression_;
    }

    public void setSimpleExpression(PSimpleExpression node)
    {
        if(this._simpleExpression_ != null)
        {
            this._simpleExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._simpleExpression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._comparator_)
            + toString(this._simpleExpression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._comparator_ == child)
        {
            this._comparator_ = null;
            return;
        }

        if(this._simpleExpression_ == child)
        {
            this._simpleExpression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._comparator_ == oldChild)
        {
            setComparator((PComparator) newChild);
            return;
        }

        if(this._simpleExpression_ == oldChild)
        {
            setSimpleExpression((PSimpleExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
