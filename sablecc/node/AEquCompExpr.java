/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AEquCompExpr extends PCompExpr
{
    private TEqu _equ_;

    public AEquCompExpr()
    {
        // Constructor
    }

    public AEquCompExpr(
        @SuppressWarnings("hiding") TEqu _equ_)
    {
        // Constructor
        setEqu(_equ_);

    }

    @Override
    public Object clone()
    {
        return new AEquCompExpr(
            cloneNode(this._equ_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAEquCompExpr(this);
    }

    public TEqu getEqu()
    {
        return this._equ_;
    }

    public void setEqu(TEqu node)
    {
        if(this._equ_ != null)
        {
            this._equ_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._equ_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._equ_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._equ_ == child)
        {
            this._equ_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._equ_ == oldChild)
        {
            setEqu((TEqu) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
