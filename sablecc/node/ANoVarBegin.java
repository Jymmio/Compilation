/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class ANoVarBegin extends PBegin
{
    private TLBrace _lBrace_;
    private PStatements _statements_;

    public ANoVarBegin()
    {
        // Constructor
    }

    public ANoVarBegin(
        @SuppressWarnings("hiding") TLBrace _lBrace_,
        @SuppressWarnings("hiding") PStatements _statements_)
    {
        // Constructor
        setLBrace(_lBrace_);

        setStatements(_statements_);

    }

    @Override
    public Object clone()
    {
        return new ANoVarBegin(
            cloneNode(this._lBrace_),
            cloneNode(this._statements_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANoVarBegin(this);
    }

    public TLBrace getLBrace()
    {
        return this._lBrace_;
    }

    public void setLBrace(TLBrace node)
    {
        if(this._lBrace_ != null)
        {
            this._lBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lBrace_ = node;
    }

    public PStatements getStatements()
    {
        return this._statements_;
    }

    public void setStatements(PStatements node)
    {
        if(this._statements_ != null)
        {
            this._statements_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._statements_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lBrace_)
            + toString(this._statements_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lBrace_ == child)
        {
            this._lBrace_ = null;
            return;
        }

        if(this._statements_ == child)
        {
            this._statements_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lBrace_ == oldChild)
        {
            setLBrace((TLBrace) newChild);
            return;
        }

        if(this._statements_ == oldChild)
        {
            setStatements((PStatements) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
